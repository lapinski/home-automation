swagger: '2.0'
info:
  title: SmartThings API
  version: 1.0-PREVIEW
  description: |
    # Overview

    This is the reference documentation for the SmartThings API.

    The SmartThings API supports [REST](https://en.wikipedia.org/wiki/Representational_state_transfer), resources are protected with [OAuth 2.0 Bearer Tokens](https://tools.ietf.org/html/rfc6750#section-2.1), and all responses are sent as [JSON](http://www.json.org/).

    # Authentication

    All SmartThings resources are protected with [OAuth 2.0 Bearer Tokens](https://tools.ietf.org/html/rfc6750#section-2.1) sent on the request as an `Authorization: Bearer <TOKEN>` header, and operations require specific OAuth scopes that specify the exact permissions authorized by the user.

    ## Token types

    There are two types of tokens: SmartApp tokens, and personal access tokens.

    SmartApp tokens are used to communicate between third-party integrations, or SmartApps, and the SmartThings API.
    When a SmartApp is called by the SmartThings platform, it is sent an authorization token that can be used to interact with the SmartThings API.

    Personal access tokens are used to interact with the API for non-SmartApp use cases. They can be created and managed on the [personal access tokens page](https://account.smartthings.com/tokens).

    ## OAuth2 scopes

    Operations may be protected by one or more OAuth security schemes, which specify the required permissions.
    Each scope for a given scheme is required.
    If multiple schemes are specified (not common), you may use either scheme.

    SmartApp token scopes are derived from the permissions requested by the SmartApp and granted by the end-user during installation.
    Personal access token scopes are associated with the specific permissions authorized when creating them.

    Scopes are generally in the form `permission:entity-type:entity-id`.

    **An `*` used for the `entity-id` specifies that the permission may be applied to all entities that the token type has access to, or may be replaced with a specific ID.**

    For more information about authrization and permissions, please see the [Authorization and permissions guide](https://smartthings.developer.samsung.com/develop/guides/smartapps/auth-and-permissions.html).

    <!-- ReDoc-Inject: <security-definitions> -->

    # Errors

    The SmartThings API uses conventional HTTP response codes to indicate the success or failure of a request.
    In general, a `2XX` response code indicates success, a `4XX` response code indicates an error given the inputs for the request, and a `5XX` response code indicates a failure on the SmartThings platform.

    API errors will contain a JSON response body with more information about the error:

    ```json
    {
      "requestId": "031fec1a-f19f-470a-a7da-710569082846"
      "error": {
        "code": "ConstraintViolationError",
        "message": "Validation errors occurred while process your request.",
        "details": [
          { "code": "PatternError", "target": "latitude", "message": "Invalid format." },
          { "code": "SizeError", "target": "name", "message": "Too small." },
          { "code": "SizeError", "target": "description", "message": "Too big." }
        ]
      }
    }
    ```

    ## Error Response Body

    The error response attributes are:

    | Property | Type | Required | Description |
    | --- | --- | --- | --- |
    | requestId | String | No | A request identifier that can be used to correlate an error to additional logging on the SmartThings servers.
    | error | Error | **Yes** | The Error object, documented below.

    ## Error Object

    The Error object contains the following attributes:

    | Property | Type | Required | Description |
    | --- | --- | --- | --- |
    | code | String | **Yes** | A SmartThings-defined error code that serves as a more specific indicator of the error than the HTTP error code specified in the response. See [SmartThings Error Codes](#section/Errors/SmartThings-Error-Codes) for more information.
    | message | String | **Yes** | A description of the error, intended to aid developers in debugging of error responses.
    | target | String | No | The target of the particular error. For example, it could be the name of the property that caused the error.
    | details | Error[] | No | An array of Error objects that typically represent distinct, related errors that occurred during the request. As an optional attribute, this may be null or an empty array.

    ## Standard HTTP Error Codes

    The following table lists the most common HTTP error response:

    | Code | Name | Description |
    | --- | --- | --- |
    | 400 | Bad Request | The client has issued an invalid request. This is commonly used to specify validation errors in a request payload.
    | 401 | Unauthorized | Authorization for the API is required, but the request has not been authenticated.
    | 403 | Forbidden | The request has been authenticated but does not have appropriate permissions, or a requested resource is not found.
    | 404 | Not Found | Specifies the requested path does not exist.
    | 406 | Not Acceptable | The client has requested a MIME type via the Accept header for a value not supported by the server.
    | 415 | Unsupported Media Type | The client has defined a contentType header that is not supported by the server.
    | 422 | Unprocessable Entity | The client has made a valid request, but the server cannot process it. This is often used for APIs for which certain limits have been exceeded.
    | 429 | Too Many Requests | The client has exceeded the number of requests allowed for a given time window.
    | 500 | Internal Server Error | An unexpected error on the SmartThings servers has occurred. These errors should be rare.
    | 501 | Not Implemented | The client request was valid and understood by the server, but the requested feature has yet to be implemented. These errors should be rare.

    ## SmartThings Error Codes

    SmartThings specifies several standard custom error codes.
    These provide more information than the standard HTTP error response codes.
    The following table lists the standard SmartThings error codes and their description:

    | Code | Typical HTTP Status Codes | Description |
    | --- | --- | --- |
    | PatternError | 400, 422 | The client has provided input that does not match the expected pattern.
    | ConstraintViolationError | 422 | The client has provided input that has violated one or more constraints.
    | NotNullError | 422 | The client has provided a null input for a field that is required to be non-null.
    | NullError | 422 | The client has provided an input for a field that is required to be null.
    | NotEmptyError | 422 | The client has provided an empty input for a field that is required to be non-empty.
    | SizeError | 400, 422 | The client has provided a value that does not meet size restrictions.
    | Unexpected Error | 500 | A non-recoverable error condition has occurred. Indicates a problem occurred on the SmartThings server that is no fault of the client.
    | UnprocessableEntityError | 422 | The client has sent a malformed request body.
    | TooManyRequestError | 429 | The client issued too many requests too quickly.
    | LimitError | 422 | The client has exceeded certain limits an API enforces.
    | UnsupportedOperationError | 400, 422 | The client has issued a request to a feature that currently isn't supported by the SmartThings platform. These should be rare.

    ## Custom Error Codes

    An API may define its own error codes where appropriate.
    These custom error codes are documented as part of that specific API's documentation.

    # Warnings
    The SmartThings API issues warning messages via standard HTTP Warning headers. These messages do not represent a request failure, but provide additional information that the requester might want to act upon.
    For instance a warning will be issued if you are using an old API version.

    # API Versions

    The SmartThings API supports both path and header-based versioning.
    The following are equivalent:

    - https://api.smartthings.com/v1/locations
    - https://api.smartthings.com/locations with header `Accept: application/vnd.smartthings+json;v=1`

    Currently, only version 1 is available.

    # Paging

    Operations that return a list of objects return a paginated response.
    The `_links` object contains the items returned, and links to the next and previous result page, if applicable.

    ```json
    {
      "items": [
        {
          "locationId": "6b3d1909-1e1c-43ec-adc2-5f941de4fbf9",
          "name": "Home"
        },
        {
          "locationId": "6b3d1909-1e1c-43ec-adc2-5f94d6g4fbf9",
          "name": "Work"
        }
        ....
      ],
      "_links": {
        "next": {
          "href": "https://api.smartthings.com/v1/locations?page=3"
        },
        "previous": {
          "href": "https://api.smartthings.com/v1/locations?page=1"
        }
      }
    }
    ```

    # Localization

    Some SmartThings API's support localization.
    Specific information regarding localization endpoints are documented in the API itself.
    However, the following should apply to all endpoints that support localization.

    ## Fallback Patterns

    When making a request with the `Accept-Language` header, this fallback pattern is observed.
    * Response will be translated with exact locale tag.
    * If a translation does not exist for the requested language and region, the translation for the language will be returned.
    * If a translation does not exist for the language, English (en) will be returned.
    * Finally, an untranslated response will be returned in the absense of the above translations.

    ## Accept-Language Header
    The format of the `Accept-Language` header follows what is defined in [RFC 7231, section 5.3.5](https://tools.ietf.org/html/rfc7231#section-5.3.5)

    ## Content-Language
    The `Content-Language` header should be set on the response from the server to indicate which translation was given back to the client.
    The absense of the header indicates that the server did not recieve a request with the `Accept-Language` header set.
schemes:
- https
basePath: /v1/
produces:
- application/json
tags:
- name: locations
  description: |
    In the SmartThings platform, the primary unit of organization of devices within a user account is the Location. The Locations API provides clients the ability work with these Locations.
- name: rooms
  description: |
    A Room can be thought of as a subset of a Location, a way to further organize devices within the Location.
- name: capabilities
  description: |
    The capabilities API is used to get the definitions of the capabilities that can be implemented by the connected device. Capability definitions include schemas for both attributes and command arguments.
- name: devices
  description: |
    The devices API is used to access metadata about devices, access the state of devices, and control them.
- name: deviceprofiles
  description: |
    Device profiles describe the components, capabilities, and categories of a type of device. Profiles are shared by
    instances of a type of device.
- name: apps
  description: |
    Most SmartThings integrations are represented as SmartApps, or "Apps". A SmartApp is created and maintained by a developer or partner
    community. At this time, Apps may only be installed into the same account that created it.
- name: installedapps
  description: |
    Most SmartThings integrations are represented as SmartApps, or "Apps". An App is created and maintained by a developer or partner
    community. At this time, Apps may only be installed into the same account that created it. Installation
    involves an OAuth process that allows a user to accept any requested permissions. After authorization, an Installed
    App is created. The Installed App API allows clients to work with the various integrations created in a user's
    account.
- name: subscriptions
  description: |
    Subscriptions allow integrations like "Apps" to be notified when events occur.
- name: schedules
  description: |
    Schedules allow integrations like "Apps" to be triggered at fixed or recurring times.
    The schedules API allows for functionality like setting timeouts in response to other events or
    actuating a device at a particular time of day.
- name: rules
  description: |
    The Rules API enable users to create automations allowing devices to work together.
securityDefinitions:
  Bearer:
    description: |
      SmartThings resources are protected with HTTP Bearer authentication and OAuth2 scopes.
    type: oauth2
    authorizationUrl: https://auth-global.api.smartthings.com
    flow: implicit
    scopes:
      mobile: A user token
      service: A service token
      r:installedapps:*: |
        Read details about installed SmartApps, such as which devices have been configured for the installation. For SmartApp tokens, the scope is restricted to the location the SmartApp is installed into. For personal access tokens, the scope is limited to the account associated with the token.
      l:installedapps: |
        View a list of installed SmartApps. For SmartApp tokens, the scope is restricted to the location the SmartApp is installed into. For personal access tokens, the scope is limited to the account associated with the token.
      w:installedapps:*: |
        Create, update, or delete installed SmartApps. For SmartApp tokens, the scope is restricted to the location the SmartApp is installed into. For personal access tokens, the scope is limited to the account associated with the token.
      r:apps:*: |
        Read details about a SmartApp. Only applicable for personal access tokens, and the scope is limited to the SmartApps associated with the token's account.
      w:apps:*: |
        Create, update, or delete SmartApps. For SmartApp tokens, the scope is restricted to the location the SmartApp is installed into. For personal access tokens, the scope is limited to the account associated with the token.
      l:devices: |
        View a list of devices. For SmartApp tokens, the scope is restricted to the location the SmartApp is installed into. For personal access tokens, the scope is limited to the account associated with the token.
      r:devices:*: |
        Read details about a device, including device attribute state. For SmartApp tokens, the scope is restricted to the location the SmartApp is installed into. For personal access tokens, the scope is limited to the account associated with the token. This scope is required to create subscriptions.
      w:devices:*: |
        Update details such as the device name, or delete a device. For SmartApp tokens, the scope is restricted to the location the SmartApp is installed into. For personal access tokens, the scope is limited to the account associated with the token.
      x:devices:*: |
        Execute commands on a device. For SmartApp tokens, the scope is restricted to the location the SmartApp is installed into. For personal access tokens, the scope is limited to the account associated with the token.
      r:deviceprofiles: |
        View details of device profiles associated with the account. Only applicable for personal access tokens.
      w:deviceprofiles: |
        Create, update, or delete device profiles. Only applicable to personal access tokens, and the device profile must be owned by the same account associated with the token.
      i:deviceprofiles: Create devices of the type associated with the device profile.
        Only applicable for SmartApp tokens, and is requires the device profile and
        the SmartApp have the same account owner.
      r:scenes:*: |
        Read details about a scene. For personal access tokens, the scope is limited to the account associated with the token.
      x:scenes:*: |
        Execute a scene. For personal access tokens, the scope is limited to the account associated with the token.
      r:schedules: |
        Read details of scheduled executions. For SmartApp tokens, the scope is restricted to the installed SmartApp. For personal access tokens, the scope is limited to the account associated with the token.
      w:schedules: |
        Create, update, or delete schedules. For SmartApp tokens, the scope is restricted to the installed SmartApp. For personal access tokens, the scope is limited to the account associated with the token.
      l:locations: |
        View a list of locations. Only applicable for personal access tokens, and the scope is limited to the account associated with the token.
      r:locations:*: |
        Read details of a location, such as geocoordinates and temperature scale. For SmartApp tokens, the scope is restricted to the installed SmartApp. For personal access tokens, the scope is limited to the account associated with the token.
      w:locations:*: |
        Create, update, and delete locations. Only applicable for personal access tokens (the scope is limited to the account associated with the token).
      r:customcapability: |
        List capabilities in a namespace. For SmartApp tokens, the scope is restricted to the installed SmartApp. For personal access tokens, the scope is limited to the account associated with the token.
      w:customcapability: |
        Write capabilities and namespaces. For SmartApp tokens, the scope is restricted to the installed SmartApp. For personal access tokens, the scope is limited to the account associated with the token.
      r:hubs: Read hubs
      r:security:locations:*:armstate: Read arm state in the given location
  Basic:
    type: basic
responses:
  notAuthenticated:
    description: Unauthorized
  notAuthorized:
    description: Forbidden
  notFound:
    description: Not found
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        requestId: 7b8514e6-230d-41cc-b3c2-512bca15abf0
        error:
          code: NotFoundError
          message: A resource could not be found.
          target: null
          details: [
            ]
  badRequest:
    description: Bad request
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        requestId: 7b8514e6-230d-41cc-b3c2-512bca15abf0
        error:
          code: BadRequestError
          message: The request is malformed.
          target: null
          details: [
            ]
  unprocessableEntity:
    description: Unprocessable Entity
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        requestId: 7b8514e6-230d-41cc-b3c2-512bca15abf0
        error:
          code: UnprocessableEntityError
          message: The request body is malformed.
          target: null
          details: [
            ]
  tooManyRequests:
    description: Too many requests
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        requestId: 7b8514e6-230d-41cc-b3c2-512bca15abf0
        error:
          code: TooManyRequestError
          message: Rate limit exceded.
          target: null
          details: [
            ]
  conflict:
    description: Conflict
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        requestId: 7b8514e6-230d-41cc-b3c2-512bca15abf0
        error:
          code: ConflictError
          message: A conflict occured that prevented action.
          target: null
          details: [
            ]
  defaultResponse:
    description: Unexpected error
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        requestId: 7b8514e6-230d-41cc-b3c2-512bca15abf0
        error:
          code: UnexpectedError
          message: A non-recoverable error condition occurred.
          target: null
          details: [
            ]
  unsupportedMediaType:
    description: Unsupported Media Type
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        requestId: 7b8514e6-230d-41cc-b3c2-512bca15abf0
        error:
          code: UnsupportedMediaTypeError
          message: text/plain is not an allowed Content-Type for the requested resource.
parameters:
  authorization:
    name: Authorization
    in: header
    description: OAuth token
    required: true
    type: string
    format: string
  deviceId:
    name: deviceId
    in: path
    type: string
    required: true
    description: the device ID
  optionalDeviceId:
    name: deviceId
    description: The ID of the device
    in: query
    type: string
    required: false
    format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  installedAppId:
    name: installedAppId
    description: The ID of the installed application.
    in: path
    type: string
    required: true
    format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  locationId:
    name: locationId
    description: The ID of the location.
    in: path
    type: string
    required: true
    format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  roomId:
    name: roomId
    description: The ID of the room.
    in: path
    type: string
    required: true
    format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  subscriptionId:
    name: subscriptionId
    description: The ID of the subscription
    in: path
    type: string
    required: true
    format: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
  tag:
    name: tag
    description: |
      May be used to filter a resource by it's assigned user-tags.  Multiple tag query params are automatically joined with OR.

      Example usage in query string:
      ```
      ?tag:key_name=value1&tag:key_name=value2
      ```
    in: query
    type: string
    required: false
    format: ^[a-zA-Z_]{1,64}$
  optionalAppId:
    name: appId
    description: The ID of an App
    in: query
    type: string
    required: false
    format: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
  optionalModeId:
    name: modeId
    description: The ID of the mode
    in: query
    type: string
    required: false
    format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  optionalSceneId:
    name: sceneId
    description: The ID of the scene
    in: query
    type: string
    required: false
    format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  configurationId:
    name: configurationId
    description: The ID of the install configuration.
    in: path
    type: string
    required: true
    format: uuid
  mnmn:
    name: mnmn
    in: query
    type: string
    required: false
    description: Secondary namespacing key for grouping presentations, traditionally
      specified as "Manufacturer name"
  deviceIdQuery:
    name: deviceId
    in: query
    type: string
    required: false
    description: |-
      The ID of a device for which we want to load the device presentation.
      If the device ID is provided, no other fields are required.
  vid:
    name: vid
    in: query
    type: string
    required: false
    description: System generated identifier that corresponds to a device presentation.
  installedAppStatus:
    name: installedAppStatus
    description: State of the Installed App.
    in: query
    type: string
    required: false
    enum:
    - PENDING
    - AUTHORIZED
    - REVOKED
    - DISABLED
  installedAppType:
    name: installedAppType
    description: Denotes the type of installed app.
    in: query
    type: string
    required: false
    enum:
    - LAMBDA_SMART_APP
    - WEBHOOK_SMART_APP
  scheduleName:
    name: scheduleName
    description: The name of the schedule
    in: path
    type: string
    format: ^[A-Za-z0-9._\-]{1,36}$
    required: true
  componentId:
    name: componentId
    description: The name of the component.
    in: path
    type: string
    required: true
    format: ^[-_!.~'()*0-9a-zA-Z]{1,36}$
  capabilityId:
    name: capabilityId
    description: The ID of the capability
    in: path
    type: string
    required: true
    pattern: ^[[a-z]*([A-Z][a-z]*)*]{1,36}$
  capabilityIdReference:
    name: capabilityId
    description: The ID of the capability.
    in: path
    type: string
    required: true
  capabilityVersion:
    name: capabilityVersion
    in: path
    type: integer
    required: true
    description: The version of the capability
  namespace:
    name: namespace
    in: path
    type: string
    required: true
    description: The namespace of the capability
    pattern: ^[a-z0-9]{1,36}$
  namespaceId:
    name: namespace
    in: query
    type: string
    required: false
    description: The namespace of the capability
    pattern: ^[a-z0-9]{1,36}$
  appNameOrId:
    name: appNameOrId
    description: The appName or appId field of an app.
    in: path
    type: string
    required: true
  appType:
    name: appType
    description: The App Type of the application.
    in: query
    type: string
    required: false
    enum:
    - LAMBDA_SMART_APP
    - WEBHOOK_SMART_APP
  classification:
    name: classification
    description: |
      An App maybe associated to many classifications.  A classification drives how the integration is presented
      to the user in the SmartThings mobile clients.  These classifications include:
      * AUTOMATION - Denotes an integration that should display under the "Automation" tab in mobile clients.
      * SERVICE - Denotes an integration that is classified as a "Service".
      * DEVICE - Denotes an integration that should display under the "Device" tab in mobile clients.
      * CONNECTED_SERVICE - Denotes an integration that should display under the "Connected Services" menu in mobile clients.
    in: query
    type: string
    required: false
    enum:
    - AUTOMATION
    - SERVICE
    - DEVICE
    - CONNECTED_SERVICE
  optionalLocationId:
    name: locationId
    description: The ID of the location that both the installed smart app and source
      are associated with.
    in: query
    type: string
    required: false
    format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  requiredLocationId:
    name: locationId
    description: The ID of the location that both the installed smart app and source
      are associated with.
    in: query
    type: string
    required: true
    format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  deviceProfileId:
    name: deviceProfileId
    in: path
    type: string
    required: true
    description: the device profile ID
  locale:
    name: locale
    in: path
    type: string
    required: true
    description: The tag of the locale as defined in [RFC bcp47](http://www.rfc-editor.org/rfc/bcp/bcp47.txt).
  modeId:
    name: modeId
    description: The ID of the Mode.
    in: path
    type: string
    required: true
    format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  optionalSceneLocationId:
    name: locationId
    description: The location of a scene.
    in: query
    type: string
    required: false
    format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  sceneId:
    name: sceneId
    description: The ID of the Scene.
    in: path
    type: string
    required: true
    format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  sceneRequest:
    name: jsonBody
    required: true
    in: body
    schema:
      $ref: '#/definitions/SceneRequest'
  Accept-Language:
    name: Accept-Language
    description: Language header representing the client's preferred language. The
      format of the `Accept-Language` header follows what is defined in [RFC 7231,
      section 5.3.5](https://tools.ietf.org/html/rfc7231#section-5.3.5)
    in: header
    type: string
  messageTemplateKey:
    name: messageTemplateKey
    description: A developer defined identifier for a message template.
    in: path
    type: string
    required: true
    format: ^[a-z0-9._]{1,36}$
  signatureType:
    name: signatureType
    description: |
      The Signature Type of the application. For WEBHOOK_SMART_APP only.
    in: query
    type: string
    required: false
    enum:
    - APP_RSA
    - ST_PADLOCK
  requireConfirmation:
    name: requireConfirmation
    description: |
      Override default configuration to use either PING or CONFIRMATION lifecycle. For WEBHOOK_SMART_APP only.
    in: query
    type: boolean
    required: false
  ruleId:
    name: ruleId
    in: path
    description: The rule ID
    required: true
    type: string
    format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  locationGroupId:
    name: locationGroupId
    description: The ID of a Location Group
    in: path
    type: string
    required: true
    format: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
  typeIntegrationId:
    name: typeIntegrationId
    in: path
    type: string
    required: true
    description: Device Profile or DTH ID. Assumes profile if the typeIntegration
      parameter is not set.
  typeShardId:
    name: typeShardId
    in: query
    type: string
    required: false
    description: 'Data Management Shard ID where the device type resides. Only useful
      for `DTH` type integrations. Example: `na04`'
  typeIntegration:
    name: typeIntegration
    in: query
    type: string
    required: false
    description: Represents the way that the provided device type is formatted, either
      in the form of a "dth" or a "profile"
    enum:
    - profile
    - dth
    default: profile
  create:
    name: create
    in: query
    type: boolean
    required: false
    description: A parameter that can be set if you want to accept and save the default
      device configuration that this generation produces.
  updateCapabilityPresentationRequest:
    name: capabilityRequestBodyForPUT
    in: body
    required: true
    schema:
      type: object
      description: The capability presentation describes how the capability will look
        in the app, what actions and states are shown, as well as how conditions and
        actions are expressed in an automation.
      properties:
        dashboard:
          $ref: '#/definitions/dashboardForCapability'
        detailView:
          $ref: '#/definitions/detailViewForCapability'
        automation:
          $ref: '#/definitions/automationForCapability'
  createCapabilityPresentationRequest:
    name: capabilityRequestBodyForPOST
    in: body
    required: true
    schema:
      $ref: '#/definitions/CreateCapabilityPresentationRequest'
  ifNoneMatch:
    name: If-None-Match
    in: header
    description: The ETag for the request.
    required: false
    type: string
    format: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
paths:
  /devices:
    parameters:
    - $ref: '#/parameters/authorization'
    get:
      summary: List devices.
      operationId: getDevices
      description: Get a list of devices.
      parameters:
      - name: capability
        in: query
        type: array
        collectionFormat: multi
        required: false
        items:
          type: string
        description: |
          The device capabilities to filter the results by.
          The capabilities are treated as an "and" so all capabilities must be present.
      - name: locationId
        in: query
        type: array
        collectionFormat: multi
        required: false
        items:
          type: string
          format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        description: |
          The device locations to filter the results by.
      - name: deviceId
        in: query
        type: array
        collectionFormat: multi
        required: false
        items:
          type: string
          format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        description: |
          The device ids to filter the results by.
      - name: capabilitiesMode
        in: query
        type: string
        enum:
        - or
        - and
        default: and
        required: false
        description: |
          Treat all capability filter query params as a logical "or" or "and" with a default of "and".
      security:
      - Bearer:
        - l:devices
      - Bearer:
        - r:devices:*
      responses:
        200:
          description: A list of devices.
          schema:
            $ref: '#/definitions/PagedDevices'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - devices
    post:
      summary: Install a Device.
      operationId: installDevice
      description: |
        Install a device. This is only available for SmartApp managed devices.
        The SmartApp that creates the device is responsible for handling commands for the device and
        updating the status of the device by creating events.
      security:
      - Bearer:
        - i:deviceprofiles
      parameters:
      - name: InstallationRequest
        in: body
        description: Installation Request
        required: true
        schema:
          $ref: '#/definitions/DeviceInstallRequest'
      responses:
        200:
          description: Device Installed.
          schema:
            $ref: '#/definitions/Device'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - devices
  /devices/{deviceId}:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/deviceId'
    get:
      summary: Get a device's description.
      operationId: getDevice
      description: Get a device's description.
      security:
      - Bearer:
        - r:devices:*
      responses:
        200:
          description: A Device
          schema:
            $ref: '#/definitions/Device'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - devices
    delete:
      summary: Delete a Device.
      operationId: deleteDevice
      description: |
        Delete a device by device id.
        If the token is for a SmartApp that created the device then it implicitly has permission for this api.
      security:
      - Bearer:
        - w:devices:*
      responses:
        200:
          description: Device deleted.
          schema:
            $ref: '#/definitions/DeleteDeviceCommandsResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - devices
    put:
      summary: Update a device.
      operationId: updateDevice
      description: |
        Update the properties of a device.
        If the token is for a SmartApp that created the device then it implicitly has permission for this api.
      parameters:
      - name: updateDeviceRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/UpdateDeviceRequest'
      security:
      - Bearer:
        - w:devices:*
      responses:
        200:
          description: Updated Device.
          schema:
            $ref: '#/definitions/Device'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - devices
  /devices/{deviceId}/commands:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/deviceId'
    post:
      summary: Execute commands on device.
      operationId: executeDeviceCommands
      description: Execute commands on a device.
      parameters:
      - name: executeCapabilityCommand
        in: body
        required: true
        schema:
          $ref: '#/definitions/DeviceCommandsRequest'
      security:
      - Bearer:
        - x:devices:*
      responses:
        200:
          description: Created commands.
          schema:
            $ref: '#/definitions/DeviceCommandsResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - devices
  /devices/{deviceId}/events:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/deviceId'
    post:
      summary: Create Device Events.
      operationId: createDeviceEvents
      description: |
        Create events for a device. When a device is managed by a SmartApp then it is responsible for creating events
        to update the attributes of the device in the SmartThings platform.
        The token must be for a SmartApp and it must be the SmartApp that created the Device.
      parameters:
      - name: deviceEventRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/DeviceEventsRequest'
      security:
      - Bearer:
        - w:devices:*
      responses:
        200:
          description: Created events.
          schema:
            $ref: '#/definitions/CreateDeviceEventsResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - devices
  /devices/{deviceId}/status:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/deviceId'
    get:
      summary: Get the full status of a device.
      operationId: getDeviceStatus
      description: |
        Get the current status of all of a device's component's attributes.
        The results may be filtered if the requester only has permission to
        view a subset of the device's components or capabilities.
        If the token is for a SmartApp that created the device then it implicitly has permission for this api.
      security:
      - Bearer:
        - r:devices:*
      responses:
        200:
          description: successful return of current status of device attributes
          schema:
            $ref: '#/definitions/DeviceStatus'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - devices
  /devices/{deviceId}/components/{componentId}/status:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/deviceId'
    - $ref: '#/parameters/componentId'
    get:
      summary: Get a device component's status.
      description: |
        Get the status of all attributes of a the component.
        The results may be filtered if the requester only has permission to view a subset of the component's capabilities.
        If the token is for a SmartApp that created the device then it implicitly has permission for this api.
      operationId: getDeviceComponentStatus
      security:
      - Bearer:
        - r:devices:*
      responses:
        200:
          description: Successful return  current status of device component's attributes.
          schema:
            $ref: '#/definitions/ComponentStatus'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - devices
  /devices/{deviceId}/components/{componentId}/capabilities/{capabilityId}/status:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/deviceId'
    - $ref: '#/parameters/componentId'
    - $ref: '#/parameters/capabilityId'
    get:
      summary: Get a capability's status.
      operationId: getDeviceStatusByCapability
      description: |
        Get the current status of a device component's capability.
        If the token is for a SmartApp that created the device then it implicitly has permission for this api.
      security:
      - Bearer:
        - r:devices:*
      responses:
        200:
          description: Successful return of current status of the attributes of a
            device component's capability
          schema:
            $ref: '#/definitions/CapabilityStatus'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - devices
  /deviceprofiles:
    post:
      parameters:
      - $ref: '#/parameters/authorization'
      - name: request
        in: body
        description: The device profile to be created.
        schema:
          $ref: '#/definitions/CreateDeviceProfileRequest'
      summary: Create a device profile
      operationId: createDeviceProfile
      description: Create a device profile.
      security:
      - Bearer:
        - w:deviceprofiles
      responses:
        200:
          description: The device profile.
          schema:
            $ref: '#/definitions/DeviceProfileResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - deviceprofiles
    get:
      parameters:
      - $ref: '#/parameters/authorization'
      - name: profileId
        in: query
        type: array
        collectionFormat: multi
        required: false
        items:
          type: string
          format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        description: |
          The device profiles IDs to filter the results by.
      summary: List all device profiles for the authenticated user
      operationId: listDeviceProfiles
      description: List device profiles.
      security:
      - Bearer:
        - r:deviceprofiles
      responses:
        200:
          description: A list of the users device profiles.
          schema:
            $ref: '#/definitions/PagedDeviceProfiles'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - deviceprofiles
  /deviceprofiles/{deviceProfileId}:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/deviceProfileId'
    get:
      parameters:
      - $ref: '#/parameters/Accept-Language'
      summary: GET a device profile
      operationId: getDeviceProfile
      description: GET a device profile.
      security:
      - Bearer:
        - r:deviceprofiles
      responses:
        200:
          description: A Device Profile
          headers:
            Content-Language:
              type: string
              description: This header field describes the natural language(s) of
                the intended audience for the representation. This can have multiple
                values as per [RFC 7231, section 3.1.3.2](https://tools.ietf.org/html/rfc7231#section-3.1.3.2)
          schema:
            $ref: '#/definitions/DeviceProfileResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - deviceprofiles
    delete:
      summary: Delete a device profile
      operationId: deleteDeviceProfile
      description: Delete a device profile by ID. Admin use only.
      security:
      - Bearer:
        - w:deviceprofiles
      responses:
        200:
          description: Device profile deleted.
          schema:
            $ref: '#/definitions/DeleteDeviceProfileResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - deviceprofiles
    put:
      parameters:
      - name: request
        in: body
        description: The device profile to be updated.
        schema:
          $ref: '#/definitions/UpdateDeviceProfileRequest'
      summary: Update a device profile
      operationId: updateDeviceProfile
      description: Update a device profile. The device profile has to be in development
        status
      security:
      - Bearer:
        - w:deviceprofiles
      responses:
        200:
          description: The device profile
          schema:
            $ref: '#/definitions/DeviceProfileResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - deviceprofiles
  /deviceprofiles/{deviceProfileId}/i18n:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/deviceProfileId'
  /deviceprofiles/{deviceProfileId}/i18n/{locale}:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/deviceProfileId'
    - $ref: '#/parameters/locale'
  /presentation/types/{typeIntegrationId}/deviceconfig:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/typeIntegration'
    - $ref: '#/parameters/typeIntegrationId'
    - $ref: '#/parameters/typeShardId'
    get:
      summary: Generate device config from a Device Profile or DTH
      description: |
        Examines the profile of the device and constructs a default device configuration.
        Note: This API functionality is in BETA
      security:
      - Bearer:
        - r:deviceprofiles
        - service:stdcp:backend
        - service
        - mobile
      operationId: generateDeviceConfig
      responses:
        200:
          description: The device configuratiion.
          schema:
            $ref: '#/definitions/deviceConfiguration'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - presentation
  /presentation/deviceconfig:
    parameters:
    - $ref: '#/parameters/authorization'
    post:
      summary: Create a device configuration
      description: |
        Make an idempotent call to either create or get a device configuration based on the structure of the provided payload
        Note: This API functionality is in BETA
      operationId: createDeviceConfiguration
      parameters:
      - name: request
        in: body
        description: The device configuration to be created
        schema:
          $ref: '#/definitions/CreateDeviceConfigRequest'
      security:
      - Bearer:
        - w:deviceprofiles
        - service:stdcp:backend
      responses:
        200:
          description: Create a device configuration or get a match if it already
            exists.
          schema:
            $ref: '#/definitions/deviceConfiguration'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - presentation
    get:
      summary: Get a device configuration
      description: |
        Get a device configuration.
        Note: This API functionality is in BETA
      operationId: getDeviceConfiguration
      parameters:
      - $ref: '#/parameters/vid'
      security:
      - Bearer:
        - r:deviceprofiles
        - mobile
      responses:
        200:
          description: The device configuration.
          schema:
            $ref: '#/definitions/deviceConfiguration'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - presentation
  /presentation:
    parameters:
    - $ref: '#/parameters/authorization'
    get:
      summary: Get a device presentation
      description: |
        Get a device presentation. If MNMN is omitted we will assume the default `SmartThingsCommunity` mnmn.
        Note: This API functionality is in BETA
      operationId: getDevicePresentation
      parameters:
      - $ref: '#/parameters/vid'
      - $ref: '#/parameters/mnmn'
      - $ref: '#/parameters/deviceIdQuery'
      - $ref: '#/parameters/ifNoneMatch'
      - $ref: '#/parameters/Accept-Language'
      security:
      - Bearer:
        - r:deviceprofiles
        - mobile
        - service
      responses:
        200:
          description: The device presentation
          schema:
            $ref: '#/definitions/devicePresentation'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - presentation
  /locations:
    parameters:
    - $ref: '#/parameters/authorization'
    get:
      tags:
      - locations
      summary: List Locations.
      description: List all Locations currently available in a user account.
      operationId: listLocations
      security:
      - Bearer:
        - r:locations:*
        - l:locations
      responses:
        200:
          description: An array of Locations
          schema:
            $ref: '#/definitions/PagedLocations'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
    post:
      tags:
      - locations
      summary: Create a Location.
      description: |
        Create a Location for a user. We will try and create the Location geographically close to the country code provided in the request body. If we do not support Location creation in the requested country code, then the API will return a 422 error response with an error code of UnsupportedGeoRegionError.
      operationId: createLocation
      security:
      - Bearer:
        - w:locations:*
      parameters:
      - name: createLocationRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/CreateLocationRequest'
      responses:
        200:
          description: Created successfully.
          schema:
            $ref: '#/definitions/Location'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
  /locations/{locationId}:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/locationId'
    get:
      tags:
      - locations
      summary: Get a Location.
      description: Get a specific Location from a user's account.
      operationId: getLocation
      security:
      - Bearer:
        - r:locations:*
      responses:
        200:
          description: A Location.
          schema:
            $ref: '#/definitions/Location'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
    put:
      tags:
      - locations
      summary: Update a Location.
      description: All the fields in the request body are optional. Only the specified
        fields will be updated.
      operationId: updateLocation
      parameters:
      - name: updateLocationRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/UpdateLocationRequest'
      security:
      - Bearer:
        - w:locations:*
      responses:
        200:
          description: A Location.
          schema:
            $ref: '#/definitions/Location'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
    delete:
      tags:
      - locations
      summary: Delete a Location.
      description: Delete a Location from a user's account.
      operationId: deleteLocation
      security:
      - Bearer:
        - w:locations:*
      responses:
        200:
          description: An empty object response.
          schema:
            $ref: '#/definitions/DeleteLocationResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
  /locations/{locationId}/rooms:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/locationId'
    get:
      tags:
      - rooms
      summary: List Rooms.
      description: List all Rooms currently available in a Location.
      operationId: listRooms
      security:
      - Bearer:
        - r:locations:*
      responses:
        200:
          description: An array of Rooms
          schema:
            $ref: '#/definitions/PagedRooms'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
    post:
      tags:
      - rooms
      summary: Create a Room.
      description: |
        Create a Room for the Location.
      operationId: createRoom
      security:
      - Bearer:
        - w:locations:*
      parameters:
      - name: createRoomRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/CreateRoomRequest'
      responses:
        200:
          description: Created successfully.
          schema:
            $ref: '#/definitions/Room'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
  /locations/{locationId}/rooms/{roomId}:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/locationId'
    - $ref: '#/parameters/roomId'
    get:
      tags:
      - rooms
      summary: Get a Room.
      description: Get a specific Room.
      operationId: getRoom
      security:
      - Bearer:
        - r:locations:*
      responses:
        200:
          description: A Room.
          schema:
            $ref: '#/definitions/Room'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
    put:
      tags:
      - rooms
      summary: Update a Room.
      description: All the fields in the request body are optional. Only the specified
        fields will be updated.
      operationId: updateRoom
      parameters:
      - name: updateRoomRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/UpdateRoomRequest'
      security:
      - Bearer:
        - w:locations:*
      responses:
        200:
          description: A Room.
          schema:
            $ref: '#/definitions/Room'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
    delete:
      tags:
      - rooms
      summary: Delete a Room.
      description: Delete a Room from a location.
      operationId: deleteRoom
      security:
      - Bearer:
        - w:locations:*
      responses:
        200:
          description: An empty object response.
          schema:
            $ref: '#/definitions/DeleteRoomResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
  /locations/{locationId}/modes:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/locationId'
  /locations/{locationId}/modes/{modeId}:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/locationId'
    - $ref: '#/parameters/modeId'
  /locations/{locationId}/modes/current:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/locationId'
  /installedapps:
    get:
      summary: List installed apps.
      operationId: listInstallations
      description: |
        List all installed applications within the specified locations. If no locations are provided, then list all
        installed apps accessible by the principle.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/optionalLocationId'
      - $ref: '#/parameters/installedAppStatus'
      - $ref: '#/parameters/installedAppType'
      - $ref: '#/parameters/tag'
      - $ref: '#/parameters/optionalAppId'
      - $ref: '#/parameters/optionalModeId'
      - $ref: '#/parameters/optionalDeviceId'
      security:
      - Bearer:
        - l:installedapps
      responses:
        200:
          description: A paginated list of installed apps.
          schema:
            $ref: '#/definitions/PagedInstalledApps'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - installedapps
  /installedapps/me: {
    }
  /installedapps/{installedAppId}:
    get:
      summary: Get an installed app.
      operationId: getInstallation
      description: Fetch a single installed application.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/installedAppId'
      security:
      - Bearer:
        - r:installedapps:*
      responses:
        200:
          description: An installed app.
          schema:
            $ref: '#/definitions/InstalledApp'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - installedapps
    delete:
      summary: Delete an installed app.
      operationId: deleteInstallation
      description: Delete an Installed App.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/installedAppId'
      security:
      - Bearer:
        - w:installedapps:*
      responses:
        200:
          description: The number of installed apps deleted.
          schema:
            $ref: '#/definitions/DeleteInstalledAppResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - installedapps
  /installedapps/{installedAppId}/configs:
    get:
      summary: List an installed app's configurations.
      operationId: listInstallationConfig
      description: List all configurations potentially filtered by status for an installed
        app.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/installedAppId'
      - name: configurationStatus
        description: Filter for configuration status.
        in: query
        type: string
        enum:
        - STAGED
        - DONE
        - AUTHORIZED
        - REVOKED
        required: false
      security:
      - Bearer:
        - r:installedapps:*
      responses:
        200:
          description: An paginated list of install configuration.
          schema:
            $ref: '#/definitions/PagedInstallConfigurations'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - installedapps
  /installedapps/{installedAppId}/configs/{configurationId}:
    get:
      summary: Get an installed app configuration.
      operationId: getInstallationConfig
      description: Fetch a detailed install configuration model containing actual
        config entries / values.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/installedAppId'
      - $ref: '#/parameters/configurationId'
      security:
      - Bearer:
        - r:installedapps:*
      responses:
        200:
          description: An install configuration detail model.
          schema:
            $ref: '#/definitions/InstallConfigurationDetail'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - installedapps
  /installedapps/{installedAppId}/tags: {
    }
  /installedapps/{installedAppId}/events:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/installedAppId'
    post:
      summary: Create Installed App events.
      operationId: createInstalledAppEvents
      description: |
        Create events for an installed app.  This API allows Apps to create events to trigger custom behavior in
        installed apps. Requires a SmartApp token.
      parameters:
      - name: createInstalledAppEventsRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/CreateInstalledAppEventsRequest'
      security:
      - Bearer: [
          ]
      responses:
        200:
          description: Created events.
          schema:
            $ref: '#/definitions/CreateInstalledAppEventsResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - installedapps
  /installedapps/{installedAppId}/send-message:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/installedAppId'
  /installedapps/{installedAppId}/subscriptions:
    parameters:
    - $ref: '#/parameters/installedAppId'
    - $ref: '#/parameters/authorization'
    get:
      tags:
      - subscriptions
      summary: List an installed app's subscriptions.
      operationId: listSubscriptions
      description: |
        List the subscriptions for the installed app.
      responses:
        200:
          description: An array of subscriptions
          schema:
            $ref: '#/definitions/PagedSubscriptions'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
    post:
      tags:
      - subscriptions
      summary: Create a subscription for an installed app.
      operationId: saveSubscription
      description: |
        Create a subscription to a type of event from the specified source.
        Both the source and the installed app must be in the location specified
        and the installed app must have read access to the event being subscribed to. An installed app is only permitted
        to created 20 subscriptions.

        ### Authorization scopes
        For installed app principal:
        * installed app id matches the incoming request installed app id location must match the installed app location

        | Subscription Type  | Scope required                                                                         |
        | ------------------ | ---------------------------------------------------------------------------------------|
        | DEVICE             | `r:devices:$deviceId`                                                                  |
        | CAPABILITY         | `r:devices:*:*:$capability` or `r:devices:*`,                                          |
        | MODE               | `r:locations:$locationId` or `r:locations:*`                                           |
        | DEVICE_LIFECYCLE   | `r:devices:$deviceId` or `r:devices:*`                                                 |
        | DEVICE_HEALTH      | `r:devices:$deviceId` or `r:devices:*`                                                 |
        | SECURITY_ARM_STATE | `r:security:locations:$locationId:armstate` or `r:security:locations:*:armstate`       |
        | HUB_HEALTH         | `r:hubs`                                                                               |
        | SCENE_LIFECYCLE    | `r:scenes:*`                                                                           |
      security:
      - Bearer:
        - r:devices:*
      - Bearer:
        - r:locations:*
      - Bearer:
        - r:security:locations:*:armstate
      - Bearer:
        - r:hubs
      - Bearer:
        - r:scenes:*
      consumes:
      - application/json
      parameters:
      - name: request
        in: body
        description: The Subscription to be created.
        schema:
          $ref: '#/definitions/SubscriptionRequest'
      responses:
        200:
          description: The subscription
          schema:
            $ref: '#/definitions/Subscription'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        409:
          $ref: '#/responses/conflict'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
    delete:
      tags:
      - subscriptions
      summary: Delete all of an installed app's subscriptions.
      operationId: deleteAllSubscriptions
      description: |
        Delete all subscriptions for the installed app.
      parameters:
      - name: deviceId
        description: Limit deletion to subscriptions for a particular device.
        in: query
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        required: false
      - name: modeId
        description: Limit deletion to subscriptions for a particular mode or deletes
          parent if last mode
        in: query
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        required: false
      responses:
        200:
          description: Successfully deleted
          schema:
            $ref: '#/definitions/SubscriptionDelete'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
  /installedapps/{installedAppId}/subscriptions/{subscriptionId}:
    parameters:
    - $ref: '#/parameters/installedAppId'
    - $ref: '#/parameters/subscriptionId'
    - $ref: '#/parameters/authorization'
    get:
      operationId: getSubscription
      summary: Get an installed app's subscription.
      description: |
        Get a specific subscription for the installed app.
      tags:
      - subscriptions
      responses:
        200:
          description: The subscription
          schema:
            $ref: '#/definitions/Subscription'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
    delete:
      summary: Delete an installed app's subscription.
      operationId: deleteSubscription
      description: |
        Delete a specific subscription for the installed app.
      tags:
      - subscriptions
      responses:
        200:
          description: Successfully deleted
          schema:
            $ref: '#/definitions/SubscriptionDelete'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
  /installedapps/{installedAppId}/schedules:
    parameters:
    - $ref: '#/parameters/installedAppId'
    - $ref: '#/parameters/authorization'
    get:
      tags:
      - schedules
      summary: List installed app schedules.
      operationId: getSchedules
      description: |
        List the schedules for the installed app.
      security:
      - Bearer:
        - r:schedules
      responses:
        200:
          description: A paged schedules list
          schema:
            $ref: '#/definitions/PagedSchedules'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
    post:
      tags:
      - schedules
      summary: Save an installed app schedule.
      operationId: createSchedule
      description: |
        Create a schedule for an installed app. The installed app must be in the location specified and the installed app must have permission to create schedules.
      security:
      - Bearer:
        - w:schedules
      consumes:
      - application/json
      parameters:
      - name: request
        in: body
        description: The schedule to be created.
        schema:
          $ref: '#/definitions/ScheduleRequest'
      responses:
        200:
          description: The created schedule.
          schema:
            $ref: '#/definitions/Schedule'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
    delete:
      tags:
      - schedules
      summary: Delete all of an installed app's schedules.
      description: |
        Delete all schedules for the installed app.
      operationId: deleteSchedules
      security:
      - Bearer:
        - w:schedules
      responses:
        200:
          description: Successfully deleted
          schema:
            $ref: '#/definitions/DeleteScheduleResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
  /installedapps/{installedAppId}/schedules/{scheduleName}:
    parameters:
    - $ref: '#/parameters/installedAppId'
    - $ref: '#/parameters/scheduleName'
    - $ref: '#/parameters/authorization'
    get:
      tags:
      - schedules
      summary: Get an installed app's schedule.
      operationId: getSchedule
      description: |
        Get a specific schedule for the installed app.
      security:
      - Bearer:
        - r:schedules
      responses:
        200:
          description: The schedule
          schema:
            $ref: '#/definitions/Schedule'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
    delete:
      tags:
      - schedules
      summary: Delete a schedule.
      description: |
        Delete a specific schedule for the installed app.
      operationId: deleteSchedule
      security:
      - Bearer:
        - w:schedules
      responses:
        200:
          description: Successfully deleted
          schema:
            $ref: '#/definitions/DeleteScheduleResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
  /subscriptions:
    parameters:
    - $ref: '#/parameters/authorization'
  /subscriptions/{subscriptionId}:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/subscriptionId'
  /subscriptions/{subscriptionId}/register:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/subscriptionId'
  /apps:
    post:
      summary: Create an app.
      operationId: createApp
      description: |
        Create an app integration.

        A single developer account is allowed to contain a maximum of 100 apps.  Upon hitting that limit a 422 error
        response is returned with an error code of LimitError.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/signatureType'
      - $ref: '#/parameters/requireConfirmation'
      - name: createOrUpdateAppRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/CreateAppRequest'
      security:
      - Bearer:
        - w:apps:*
      responses:
        200:
          description: An app model.
          schema:
            $ref: '#/definitions/CreateAppResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - apps
    get:
      summary: List apps.
      operationId: listApps
      description: List all apps configured in an account.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/appType'
      - $ref: '#/parameters/classification'
      - $ref: '#/parameters/tag'
      security:
      - Bearer:
        - r:apps
      responses:
        200:
          description: A paginated list of apps.
          schema:
            $ref: '#/definitions/PagedApps'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - apps
  /apps/{appNameOrId}:
    get:
      summary: Get an app.
      operationId: getApp
      description: Get a single app.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/appNameOrId'
      security:
      - Bearer:
        - r:apps:*
      responses:
        200:
          description: An app.
          schema:
            $ref: '#/definitions/App'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - apps
    put:
      summary: Update an app.
      operationId: updateApp
      description: Update an app.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/appNameOrId'
      - $ref: '#/parameters/signatureType'
      - $ref: '#/parameters/requireConfirmation'
      - name: updateAppRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/UpdateAppRequest'
      security:
      - Bearer:
        - w:apps:*
      responses:
        200:
          description: An app model.
          schema:
            $ref: '#/definitions/App'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - apps
    delete:
      summary: Delete an app.
      operationId: deleteApp
      description: Delete an app.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/appNameOrId'
      security:
      - Bearer:
        - w:apps:*
      responses:
        200:
          description: The number of deleted apps.
          schema:
            $ref: '#/definitions/DeleteAppResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - apps
  /apps/{appNameOrId}/settings:
    get:
      summary: Get settings.
      operationId: getAppSettings
      description: Get settings for an app.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/appNameOrId'
      security:
      - Bearer:
        - r:apps:*
      responses:
        200:
          description: An app settings model.
          schema:
            $ref: '#/definitions/GetAppSettingsResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - apps
    put:
      summary: Update settings.
      operationId: updateAppSettings
      description: Update settings for an app.
      parameters:
      - $ref: '#/parameters/authorization'
      - name: appNameOrId
        in: path
        description: The appName or appId  field of an app.
        required: true
        type: string
      - name: updateAppSettingsRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/UpdateAppSettingsRequest'
      security:
      - Bearer:
        - w:apps:*
      responses:
        200:
          description: An app settings model.
          schema:
            $ref: '#/definitions/UpdateAppSettingsResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - apps
  /apps/{appNameOrId}/oauth:
    get:
      summary: Get an app's oauth settings.
      operationId: getAppOauth
      description: Get an app's oauth settings.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/appNameOrId'
      security:
      - Bearer:
        - r:apps:*
      responses:
        200:
          description: An app.
          schema:
            $ref: '#/definitions/AppOAuth'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - apps
    put:
      summary: Update an app's oauth settings.
      operationId: updateAppOauth
      description: Update an app's oauth settings.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/appNameOrId'
      - name: updateAppOAuthRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/UpdateAppOAuthRequest'
      security:
      - Bearer:
        - w:apps:*
      responses:
        200:
          description: An app's oauth settings model.
          schema:
            $ref: '#/definitions/AppOAuth'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - apps
  /apps/{appNameOrId}/oauth/generate:
    post:
      summary: Generate an app's oauth client/secret.
      operationId: generateAppOauth
      description: |
        When an app is first created an OAuth client/secret are automatically generated for the integration.  However,
        there are times when it maybe useful to re-generate a client/secret.  Such as in cases where a secret becomes
        compromised.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/appNameOrId'
      - name: generateAppOAuthRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/GenerateAppOAuthRequest'
      security:
      - Bearer:
        - w:apps:*
      responses:
        200:
          description: |
            An a response object containing the newly create OAuth Client ID / Secret and relevant details
            pertaining to the OAuth client.
          schema:
            $ref: '#/definitions/GenerateAppOAuthResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - apps
  /apps/{appNameOrId}/tags: {
    }
  /apps/{appNameOrId}/register:
    put:
      summary: Sends a confirmation request to App.
      operationId: register
      description: Prepares to register an App by sending the endpoint a confirmation
        message.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/appNameOrId'
      - name: appRegisterRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/AppRegisterRequest'
      security:
      - Bearer:
        - w:apps:*
      responses:
        202:
          description: A request to send a confirm registration request has been accepted.
          schema:
            $ref: '#/definitions/AppRegisterResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - apps
  /apps/{appNameOrId}/signature-type:
    put:
      summary: Update an app's signature type.
      operationId: updateSignatureType
      description: |
        Updates the signature type of an App.  Signature options:
          * APP_RSA - Legacy signing mechanism comprised of a public / private key generated for an App during registration.  This mechanism requires an App to download the public key and deploy along side their integration to verify the signature in the authorization header.
          * ST_PADLOCK - App callbacks are signed with a SmartThings certificate which is publicly available at https://key.smartthings.com.  App's authorize callbacks by fetching the certificate over HTTPS and using it to validate the signature in the authorization header.

        Note that when upgrading an App from APP_RSA to ST_PADLOCK it is recommended to implement both verification methods.
        This will provide the ability to seamlessly switch between mechanisms in case a rollback is needed.
      parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/appNameOrId'
      - name: updateSignatureTypeRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/UpdateSignatureTypeRequest'
      security:
      - Bearer:
        - w:apps:*
      responses:
        202:
          description: |
            App signature type will be updated asynchronously.  Developer can expect change to take effect within a few minutes.
          schema:
            $ref: '#/definitions/UpdateSignatureTypeResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - apps
  /apps/{appNameOrId}/message-templates:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/appNameOrId'
  /apps/{appNameOrId}/message-templates/{messageTemplateKey}:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/appNameOrId'
    - $ref: '#/parameters/messageTemplateKey'
  /rules:
    parameters:
    - $ref: '#/parameters/authorization'
    get:
      summary: Rules list
      operationId: listRules
      description: List of rules for the location for the given token principal
      security:
      - Bearer:
        - r:rules:*
      parameters:
      - name: locationId
        description: The ID of the location to list the rules for.
        in: query
        type: string
        required: true
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      - name: max
        description: The max number of rules to fetch
        in: query
        required: false
        type: integer
      - name: offset
        description: The start index of rules to fetch
        in: query
        required: false
        type: integer
      responses:
        200:
          description: A paginated list of rules.
          schema:
            $ref: '#/definitions/PagedRules'
        400:
          description: Bad request
        401:
          description: Not authenticated
        403:
          description: Not authorized or not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      tags:
      - rules
    post:
      summary: Create a rule
      operationId: createRule
      description: Create a rule for the location and token principal
      security:
      - Bearer:
        - w:rules:*
      consumes:
      - application/json
      parameters:
      - name: locationId
        description: The ID of the location in which to create the rule in.
        in: query
        type: string
        required: true
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      - name: request
        in: body
        required: true
        description: The rule to be created.
        schema:
          $ref: '#/definitions/RuleRequest'
      responses:
        200:
          description: The created rule
          schema:
            $ref: '#/definitions/Rule'
        401:
          description: Not authenticated
        403:
          description: Not authorized
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      tags:
      - rules
  /rules/{ruleId}:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/ruleId'
    get:
      summary: Get a Rule
      operationId: getRule
      description: Get a rule
      security:
      - Bearer:
        - r:rules:*
      parameters:
      - name: locationId
        description: The ID of the location to list the rules for.
        in: query
        type: string
        required: true
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      responses:
        200:
          description: The rule
          schema:
            $ref: '#/definitions/Rule'
        401:
          description: Not authenticated
        403:
          description: Not authorized or not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      tags:
      - rules
    put:
      summary: Update a rule
      operationId: updateRule
      description: Update a rule
      security:
      - Bearer:
        - w:rules:*
      consumes:
      - application/json
      parameters:
      - name: locationId
        description: The ID of the location in which to update the rule in.
        in: query
        type: string
        required: true
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      - name: request
        in: body
        required: true
        description: The rule to be updated.
        schema:
          $ref: '#/definitions/RuleRequest'
      responses:
        200:
          description: The rule
          schema:
            $ref: '#/definitions/Rule'
        401:
          description: Not authenticated
        403:
          description: Not authorized or not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      tags:
      - rules
    delete:
      summary: Delete a rule
      operationId: deleteRule
      description: Delete a rule
      security:
      - Bearer:
        - w:rules:*
      parameters:
      - name: locationId
        description: The ID of the location in which to delete the rule in.
        in: query
        type: string
        required: true
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      responses:
        200:
          description: Successfully deleted
          schema:
            $ref: '#/definitions/Rule'
        401:
          description: Not authenticated
        403:
          description: Not authorized or not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      tags:
      - rules
  /rules/execute/{ruleId}:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/ruleId'
    - $ref: '#/parameters/requiredLocationId'
    post:
      summary: Execute a rule
      operationId: executeRule
      description: Trigger Rule execution given a rule ID
      security:
      - Bearer:
        - x:rules:*
      responses:
        200:
          description: Successfully Executed
          schema:
            $ref: '#/definitions/RuleExecutionResponse'
        401:
          description: Not authenticated
        403:
          description: Not authorized or not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      tags:
      - rules
  /scenes:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/optionalSceneLocationId'
    get:
      summary: List Scenes
      operationId: listScenes
      description: Fetch a list of Scenes for the logged in user filtered by locationIds.
        If no locationId is sent, return scenes for all available locations
      security:
      - Bearer:
        - r:scenes:*
      produces:
      - application/vnd.smartthings+json
      responses:
        200:
          description: The Scenes have been fetched
          schema:
            $ref: '#/definitions/ScenePagedResult'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - scenes
  /scenes/{sceneId}/execute:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/optionalSceneLocationId'
    - $ref: '#/parameters/sceneId'
    post:
      summary: Execute Scene
      operationId: executeScene
      description: Execute a Scene by id for the logged in user and given locationId
      security:
      - Bearer:
        - x:scenes:*
      produces:
      - application/json
      responses:
        200:
          description: The Scene has been executed
          schema:
            $ref: '#/definitions/StandardSuccessResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - scenes
  /capabilities:
    parameters:
    - $ref: '#/parameters/authorization'
    get:
      summary: All capabilities.
      operationId: listCapabilities
      description: All capabilities.
      security:
      - Bearer: [
          ]
      responses:
        200:
          description: successful return of all capabilities
          headers:
            X-RateLimit-Limit:
              type: integer
              description: Maximum requests allowed within the rate limit window.
            X-RateLimit-Remaining:
              type: integer
              description: Remaining requests available within the window.
            X-RateLimit-Reset:
              type: integer
              description: Time in milliseconds until the current window expires.
          schema:
            $ref: '#/definitions/PagedCapabilities'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - capabilities
    post:
      summary: Create a capability
      operationId: createCapability
      description: Create a capability.
      parameters:
      - $ref: '#/parameters/namespaceId'
      - name: capabilityRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/CreateCapabilityRequest'
      security:
      - Bearer:
        - w:customcapability
      responses:
        200:
          headers:
            X-RateLimit-Limit:
              type: integer
              description: Maximum requests allowed within the rate limit window.
            X-RateLimit-Remaining:
              type: integer
              description: Remaining requests available within the window.
            X-RateLimit-Reset:
              type: integer
              description: Time in milliseconds until the current window expires.
          description: The custom capability
          schema:
            $ref: '#/definitions/Capability'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        404:
          $ref: '#/responses/notFound'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - capabilities
  /capabilities/{capabilityId}:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/capabilityIdReference'
  /capabilities/{capabilityId}/{capabilityVersion}:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/capabilityIdReference'
    - $ref: '#/parameters/capabilityVersion'
    get:
      summary: Get a capability by ID and Version.
      operationId: getCapability
      description: Get a capability by ID.
      security:
      - Bearer: [
          ]
      responses:
        200:
          headers:
            X-RateLimit-Limit:
              type: integer
              description: Maximum requests allowed within the rate limit window.
            X-RateLimit-Remaining:
              type: integer
              description: Remaining requests available within the window.
            X-RateLimit-Reset:
              type: integer
              description: Time in milliseconds until the current window expires.
          description: successful return of a capability
          schema:
            $ref: '#/definitions/Capability'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        404:
          $ref: '#/responses/notFound'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - capabilities
    put:
      summary: Update a capability
      operationId: updateCapability
      description: |
        Update a capability.
        Capabilities with a "proposed" status can be updated at will.
        Capabilities with a "live", "deprecated", or "dead" status are immutable and can't be updated, for the time being.
        Capability name cannot be changed, as the id is derived from the name, so that should just be a new capability.
      parameters:
      - name: capabilityRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/UpdateCapabilityRequest'
      security:
      - Bearer:
        - w:customcapability
      responses:
        200:
          description: The custom capability
          schema:
            $ref: '#/definitions/Capability'
          headers:
            X-RateLimit-Limit:
              type: integer
              description: Maximum requests allowed within the rate limit window.
            X-RateLimit-Remaining:
              type: integer
              description: Remaining requests available within the window.
            X-RateLimit-Reset:
              type: integer
              description: Time in milliseconds until the current window expires.
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        409:
          $ref: '#/responses/conflict'
        415:
          $ref: '#/responses/unsupportedMediaType'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - capabilities
    delete:
      summary: Delete a capability by id and version.
      operationId: deleteCapability
      description: Delete a capability id and version (only if it is in a "proposed"
        status).
      security:
      - Bearer:
        - w:customcapability
      responses:
        200:
          description: Capability Deleted
          headers:
            X-RateLimit-Limit:
              type: integer
              description: Maximum requests allowed within the rate limit window.
            X-RateLimit-Remaining:
              type: integer
              description: Remaining requests available within the window.
            X-RateLimit-Reset:
              type: integer
              description: Time in milliseconds until the current window expires.
          schema:
            $ref: '#/definitions/DeleteNamespaceResponse'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        404:
          $ref: '#/responses/notFound'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - capabilities
  /capabilities/{capabilityId}/{capabilityVersion}/presentation:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/capabilityIdReference'
    - $ref: '#/parameters/capabilityVersion'
    post:
      summary: Create a capability presentation
      operationId: createCustomCapabilityPresentation
      description: |
        Create a capability presentation.
        Note: This API functionality is in BETA
      parameters:
      - name: createCustomCapabilityPresentationRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/CreateCapabilityPresentationRequest'
      security:
      - Bearer:
        - w:customcapability
      responses:
        200:
          description: The custom capability presentation
          headers:
            X-RateLimit-Limit:
              type: integer
              description: Maximum requests allowed within the rate limit window.
            X-RateLimit-Remaining:
              type: integer
              description: Remaining requests available within the window.
            X-RateLimit-Reset:
              type: integer
              description: Time in milliseconds until the current window expires.
          schema:
            $ref: '#/definitions/capabilityPresentation'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        409:
          $ref: '#/responses/conflict'
        415:
          $ref: '#/responses/unsupportedMediaType'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - capabilities
    get:
      summary: Get a capability presentation by ID and Version.
      operationId: getCustomCapabilityPresentation
      description: |
        Get a capability presentation by ID.
        Note: This API functionality is in BETA
      security:
      - Bearer:
        - r:customcapability
      responses:
        200:
          headers:
            X-RateLimit-Limit:
              type: integer
              description: Maximum requests allowed within the rate limit window.
            X-RateLimit-Remaining:
              type: integer
              description: Remaining requests available within the window.
            X-RateLimit-Reset:
              type: integer
              description: Time in milliseconds until the current window expires.
          description: successful return of a capability presentation
          schema:
            $ref: '#/definitions/capabilityPresentation'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        404:
          $ref: '#/responses/notFound'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - capabilities
    put:
      summary: Update a capability presentation
      operationId: updateCustomCapabilityPresentation
      description: |
        Update a capability presentation.
        Note: This API functionality is in BETA
      parameters:
      - $ref: '#/parameters/updateCapabilityPresentationRequest'
      security:
      - Bearer:
        - w:customcapability
      responses:
        200:
          description: The custom capability presentation
          headers:
            X-RateLimit-Limit:
              type: integer
              description: Maximum requests allowed within the rate limit window.
            X-RateLimit-Remaining:
              type: integer
              description: Remaining requests available within the window.
            X-RateLimit-Reset:
              type: integer
              description: Time in milliseconds until the current window expires.
          schema:
            $ref: '#/definitions/capabilityPresentation'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        400:
          $ref: '#/responses/badRequest'
        409:
          $ref: '#/responses/conflict'
        415:
          $ref: '#/responses/unsupportedMediaType'
        422:
          $ref: '#/responses/unprocessableEntity'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - capabilities
  /capabilities/namespaces:
    parameters:
    - $ref: '#/parameters/authorization'
  /capabilities/namespaces/{namespace}:
    parameters:
    - $ref: '#/parameters/authorization'
    - $ref: '#/parameters/namespace'
    get:
      summary: List capabilities by namespace.
      operationId: listNamespacedCapabilities
      description: |
        Namespaces are used to organize a user's capabilities and provide a way to uniquely identify them. A user can
        retrieve all of the capabilities under their assigned namespace by referencing it.
        The namespace is recognizable as the first part of a capabilityId in the format `namespace.capabilityName`.
      security:
      - Bearer:
        - r:customcapability
      responses:
        200:
          description: successful return of a namespace's capabilities
          headers:
            X-RateLimit-Limit:
              type: integer
              description: Maximum requests allowed within the rate limit window.
            X-RateLimit-Remaining:
              type: integer
              description: Remaining requests available within the window.
            X-RateLimit-Reset:
              type: integer
              description: Time in milliseconds until the current window expires.
          schema:
            $ref: '#/definitions/PagedCapabilities'
        401:
          $ref: '#/responses/notAuthenticated'
        403:
          $ref: '#/responses/notAuthorized'
        429:
          $ref: '#/responses/tooManyRequests'
        default:
          $ref: '#/responses/defaultResponse'
      tags:
      - capabilities
  /history/devices: {
    }
  /schema/apps: {
    }
  /schema/apps/{endpointAppId}: {
    }
  /schema/apps/user/{userId}: {
    }
  /schema/installedapps/{isaId}:
    parameters:
    - name: isaId
      description: isaId of the user.
      in: path
      required: true
      type: string
    - name: locationId
      description: locationId of the user.
      in: query
      required: true
      type: string
    - name: Authorization
      in: header
      description: |-
        Mobile Token `[iot.client, w:installedapps:*]` or
        Personal Access Token `[r:installedapps:*]`
      required: true
      type: string
      format: Bearer token
  /schema/installedapps/location/{locationId}: {
    }
  /schema/install/{endpointAppId}: {
    }
  /services/coordinate/locations/{locationId}: {
    }
  /services/coordinate/locations/{locationId}/subscriptions: {
    }
  /services/coordinate/locations/{locationId}/subscriptions/{subscriptionId}: {
    }
  /services/coordinate/locations/{locationId}/capabilities: {
    }
definitions:
  Link:
    type: object
    properties:
      href:
        type: string
        description: An absolute URL linking to a resource.
        example: https://...
  Links:
    type: object
    properties:
      next:
        $ref: '#/definitions/Link'
      previous:
        $ref: '#/definitions/Link'
  ErrorResponse:
    type: object
    properties:
      requestId:
        type: string
        description: A correlation id used for reference when contacting support.
        example: 7b8514e6-230d-41cc-b3c2-512bca15abf0
      error:
        $ref: '#/definitions/Error'
  Error:
    description: Details about the error.
    type: object
    properties:
      code:
        type: string
        description: Machine readable error code.
        example: ConstraintViolationError
      message:
        type: string
        description: Human readable error message.
        example: The request was malformed.
      target:
        type: string
        description: Optional field used to point to a problamatic part of the request.
        example: 31192dc9-eb45-4d90-b606-21e9b66d8c2b
      details:
        type: array
        items:
          $ref: '#/definitions/Error'
  Owner:
    description: A typed model which provides information around ownership of a specific
      domain.
    type: object
    properties:
      ownerType:
        type: string
        default: USER
        enum:
        - USER
        - SYSTEM
        - IMPLICIT
        description: The account type which owns the specific domain item.
      ownerId:
        type: string
        description: A global idenfifier for owner.
    example:
      ownerType: USER
      ownerId: 72fd3b54-d243-4bf7-a845-92eb7956b982
  Tags:
    description: |
      A map of user-defined tags which can be used to associate arbitrary metadata to a resource, and can be
      useful for filtering.

      * Key length must be between 1 and 64 (inclusive) Unicode characters in UTF-8
      * Value length must be between 1 and 256 (inclusive) Unicode characters in UTF-8
      * Case sensitive
      * Maximum number of tags per resource: 25
      * Reserved prefix — `st:`
      * ST-generated tag names and values are automatically assigned the `st:` prefix, which you cannot assign.
      * Use each key only once for each resource. If you attempt to use the same key twice on the same resource the last key wins.
      * You cannot tag a resource at the same time you create it. Tagging requires a separate action after the resource is created.
      * Allowed characters for *keys* are letters, plus the following special characters: `:`, `_`
      * Allowed characters for *values* are letters, whitespace, and numbers, plus the following special characters: `+`, `-`, `=`, `.`, `_`, `:`, `/`
      * If you need characters outside this allowed set, you can apply standard base-64 encoding to your tag.
    type: object
    additionalProperties:
      type: string
  Device:
    type: object
    properties:
      deviceId:
        type: string
        description: The identifier for the device instance.
        example: 6f5ea629-4c05-4a90-a244-cc129b0a80c3
      name:
        type: string
        description: The name that the device integration (Device Handler or SmartApp)
          defines for the device.
        example: color.light.100x
      label:
        type: string
        description: The name that a user chooses for the device. This defaults to
          the same value as name.
        example: color.light.100x
      deviceManufacturerCode:
        type: string
        description: The device manufacturer code.
        example: 010F-0B01-2002
      locationId:
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        description: The ID of the Location with which the device is associated.
        example: 0c0b935d-0616-4441-a0bf-da7aeec3dc0a
      roomId:
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        description: The ID of the Room with which the device is associated. If the
          device is not associated with any room, then this field will be null.
        example: 0fd2b1ef-1b33-4a54-9153-65aca91e9660
      deviceTypeId:
        type: string
        description: Deprecated please look under "dth".
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        example: Deprecated please look under "dth".
      deviceTypeName:
        type: string
        description: Deprecated please look under "dth".
        example: Deprecated please look under "dth".
      deviceNetworkType:
        type: string
        description: Deprecated please look under "dth".
        example: Deprecated please look under "dth".
      components:
        type: array
        description: The IDs of all compenents on the device.
        items:
          $ref: '#/definitions/DeviceComponent'
      childDevices:
        type: array
        description: Device details for all child devices of the device.
        items:
          $ref: '#/definitions/Device'
      profile:
        $ref: '#/definitions/DeviceProfileReference'
      app:
        type: object
        description: Device Profile information for the SmartApp. This field will
          be empty if device type is not ENDPOINT_APP.
        $ref: '#/definitions/AppDeviceDetails'
      dth:
        type: object
        description: Device Profile information for DTH. This field will be empty
          if device type is not DTH.
        $ref: '#/definitions/DthDeviceDetails'
      ir:
        type: object
        description: IR device information. This field will be empty if device type
          is not IR.
        $ref: '#/definitions/IrDeviceDetails'
      irOcf:
        type: object
        description: IR_OCF device information. This field will be empty if device
          type is not IR_OCF.
        $ref: '#/definitions/IrDeviceDetails'
      viper:
        $ref: '#/definitions/ViperDeviceDetails'
        description: Viper device information. This field will be empty if device
          type is not VIPER.
      type:
        $ref: '#/definitions/DeviceIntegrationType'
      restrictionTier:
        type: integer
        description: Restriction tier of the device, if any.
  PagedDevices:
    description: A paginated array of devices.
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Device'
      _links:
        $ref: '#/definitions/Links'
  DeviceComponent:
    type: object
    properties:
      id:
        type: string
        example: main
        format: ^[-_!.~'()*0-9a-zA-Z]{1,36}$
      label:
        type: string
        description: UTF-8 label for the component.
      capabilities:
        type: array
        items:
          $ref: '#/definitions/CapabilityReference'
  CapabilityReference:
    type: object
    properties:
      id:
        type: string
        example: switch
      version:
        type: integer
        example: 1
    required:
    - id
  DeviceCategory:
    description: A case-sensitive string from the pre-defined list of valid categories
      [/devicecategories](#/operation/listCategories).
    type: object
    properties:
      name:
        example: Light
        type: string
    required:
    - name
  DeviceCommandsRequest:
    type: object
    properties:
      commands:
        description: An array of commands to execute on the Device.
        type: array
        items:
          $ref: '#/definitions/DeviceCommand'
  DeviceCommand:
    type: object
    properties:
      component:
        type: string
        description: The name of the component on this device, default is 'main'.
          The component must be valid for the device.
        default: main
        format: ^[-_!.~'()*0-9a-zA-Z]{1,36}$
      capability:
        description: Capability that this command relates to. This must be a capability
          of the component.
        type: string
      command:
        description: Name of the command, this must be valid for the capability.
        type: string
      arguments:
        type: array
        items:
          type: object
        description: |
          Arguments of the command.
          All the required arguments defined in the capability's command argument definition must be provided.
          The type of the arguments are dependent on the type of the capability's command argument.
          Please refer to the capabilities definition at https://smartthings.developer.samsung.com/develop/api-ref/capabilities.html
    required:
    - capability
    - command
    example:
      component: main
      capability: switchLevel
      command: setLevel
      arguments:
      - 80
  DeviceStatus:
    description: The status of a Device.
    type: object
    properties:
      components:
        description: A map of componentId to Component status.
        type: object
        additionalProperties:
          $ref: '#/definitions/ComponentStatus'
        example:
          main:
            switch:
              switch:
                value: 'on'
            switchLevel:
              level:
                value: 90
      healthState:
        type: object
        properties:
          state:
            description: Current state of the device
            type: string
            enum:
            - ONLINE
            - OFFLINE
          lastUpdatedDate:
            type: string
            description: Last reported date/time in UTC
            format: date-time
  ComponentStatus:
    description: A map of capabilityId to Capability status.
    type: object
    additionalProperties:
      $ref: '#/definitions/CapabilityStatus'
    example:
      switch:
        switch:
          value: 'on'
      switchLevel:
        level:
          value: 90
  CapabilityStatus:
    description: A map of Attribute name to Attribute state.
    type: object
    additionalProperties:
      $ref: '#/definitions/AttributeState'
    example:
      switch:
        value: 'on'
  AttributeState:
    type: object
    properties:
      value:
        type: object
        example: 0
      unit:
        type: string
        example: °C
      data:
        type: object
        additionalProperties:
          type: object
        example:
          method: manual
          codeId: 1234
          timeout: 2018-05-09T23:03:31+0000
      timestamp:
        type: string
        description: Will always be 0 timezone offset
        format: date-time
        example: '2017-12-18T22:14:52.714Z'
  DeviceEventsRequest:
    type: object
    properties:
      deviceEvents:
        description: An array of attribute state updates.
        type: array
        minItems: 1
        maxItems: 8
        items:
          $ref: '#/definitions/DeviceStateEvent'
  DeviceStateEvent:
    type: object
    properties:
      component:
        type: string
        description: The name of the component on this device, default is 'main'.
      capability:
        type: string
        description: Capability that this event relates to.
      attribute:
        type: string
        description: Name of the capability attribute that this event relates to.
      value:
        type: object
        description: Value associated with the event. The valid value depends on the
          capability.
      unit:
        type: string
        description: Unit of the value field.
      data:
        type: object
        description: Key value pairs about the state of the device. Valid values depend
          on the capability.
        additionalProperties:
          type: object
    required:
    - value
    example:
      component: main
      capability: switchLevel
      attribute: level
      value: 0
      unit: null
      data: null
  DeviceInstallRequest:
    type: object
    properties:
      label:
        type: string
        description: The label for the device.
        example: Living room light
      locationId:
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        description: The ID of the Location with which the device is associated.
        example: 0c0b935d-0616-4441-a0bf-da7aeec3dc0a
      app:
        type: object
        properties:
          profileId:
            type: string
            description: The device profile Id
            example: 6f5ea629-4c05-4a90-a244-cc129b0a80c3
          installedAppId:
            type: string
            description: The ID of the installed application
            format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
            example: 6f5ea629-4c05-4a90-a244-cc129b0a80c3
          externalId:
            type: string
            description: A field to store an ID from a system external to SmartThings.
            maxLength: 64
            example: Th13390
        required:
        - profileId
        - installedAppId
    required:
    - app
    - locationId
  AppDeviceDetails:
    type: object
    properties:
      installedAppId:
        description: The ID of the installed app that integrates this device.
        type: string
        example: 0c0b935d-0616-4441-a0bf-da7aeec3dc0a
        format: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
      externalId:
        type: string
        description: A field to store an ID from a system external to SmartThings.
        maxLength: 64
        example: Th13390
      profile:
        $ref: '#/definitions/DeviceProfileReference'
  DthDeviceDetails:
    type: object
    properties:
      deviceTypeId:
        type: string
        description: The identifier for the device's DeviceType.
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        example: 7b8514e6-230d-41cc-b3c2-512bca15abf0
      deviceTypeName:
        type: string
        description: The name for the device's DeviceType.
        example: x.com.samsung.da.fridge
      deviceNetworkType:
        type: string
        description: The device network type.
        example: ZWAVE
      completedSetup:
        type: boolean
        description: True if the device setup has been completed so the device is
          ready to use.
      networkSecurityLevel:
        $ref: '#/definitions/DeviceNetworkSecurityLevel'
      hubId:
        type: string
        description: The hub that the device is connected to.
        example: f7239728-edb3-48e9-b588-a27f30b968a0
    required:
    - deviceTypeId
    - deviceTypeName
    - completedSetup
  IrDeviceDetails:
    type: object
    properties:
      parentDeviceId:
        description: The id of the Parent device.
        type: string
        format: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
      profileId:
        type: string
        description: The id of the profile that describes the device components and
          capabilities.
        example: 0c0b875r-0213-6479-a0bf-da7aeec3dc0a
        format: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
      ocfDeviceType:
        type: string
        description: The OCF Device Type
        example: oic.d.tv
      irCode:
        type: string
        description: The id of the ircode
        example: 006C
      functionCodes:
        type: object
        description: List of IR function codes
        properties:
          default:
            type: string
        additionalProperties: true
        example:
          statelessPowerToggleButton.powerToggle: power
          statelessAudioMuteButton.muteToggle: mute
          statelessAudioVolumeButton.volumeUp: volume_up
          statelessAudioVolumeButton.volumeDown: volume_down
          statelessChannelButton.channelUp: channel_up
          statelessChannelButton.channelDown: channel_down
          statelessCustomButton.green: green
          statelessCustomButton.right: right
          statelessCustomButton.3: 3
          statelessCustomButton.exit: exit
          statelessCustomButton.playback: playback
      childDevices:
        type: array
        description: list of child devices
        items:
          $ref: '#/definitions/IrDeviceDetails'
      metadata:
        description: |
          Key value pairs stored in the conductor for the device.
          UI Metadata information
        type: object
        additionalProperties: true
  ViperDeviceDetails:
    type: object
    properties:
      uniqueIdentifier:
        type: string
        example: 1a-74
      manufacturerName:
        type: string
        example: TP-Link
      modelName:
        type: string
        example: HS101
      swVersion:
        type: string
        example: 23.123.231
      hwVersion:
        type: string
        example: v1 US bulb
  DeviceProfileReference:
    type: object
    properties:
      id:
        type: string
        description: The device profile Id
        example: a7b3c264-2d22-416e-bca1-ca4b59a60aee
  DeviceIntegrationType:
    type: string
    enum:
    - BLE
    - BLE_D2D
    - DTH
    - ENDPOINT_APP
    - HUB
    - IR
    - IR_OCF
    - MQTT
    - OCF
    - PENGYOU
    - VIDEO
    - VIPER
    - WATCH
    default: DTH
    description: |
      The type of device integration (may be null).
      If the type is DTH, the device implementation is a groovy Device Handler and the details are in the "dth" field.
      If the type is ENDPOINT_APP, the device implementation is a SmartApp and the details are in the "app" field.
      If the type is IR, the details are in the "ir" field.
      If the type is IR_OCF, the details are in the "irOcf" field.
      If the type is VIPER, the details are in the "viper" field.
  CreateDeviceEventsResponse:
    type: object
  DeviceCommandsResponse:
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/CommandResult'
  CommandResult:
    type: object
    properties:
      id:
        description: A UUID used for tracking the individual command.
        type: string
        format: uuid
      status:
        $ref: '#/definitions/CommandStatus'
  CommandStatus:
    description: |
      `ACCEPTED`: the command is processing but it's outcome is unknown
      `COMPLETED`: the command has successfully completed
      `FAILED`: the command has failed
    type: string
    enum:
    - ACCEPTED
    - COMPLETED
    - FAILED
  DeleteDeviceCommandsResponse:
    type: object
  UpdateDeviceRequest:
    type: object
    properties:
      label:
        type: string
        description: The label for the device.
        example: Living room light
        minLength: 1
        maxLength: 255
      components:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              example: main
            categories:
              type: array
              description: A case-sensitive string from the pre-defined list of valid
                categories [/devicecategories](#/operation/listCategories).
              items:
                type: string
                example: Light
              minItems: 1
              maxItems: 1
          required:
          - id
          - categories
    required:
    - label
  DeviceNetworkSecurityLevel:
    type: string
    enum:
    - UNKNOWN
    - ZWAVE_LEGACY_NON_SECURE
    - ZWAVE_S0_LEGACY
    - ZWAVE_S0_FALLBACK
    - ZWAVE_S2_UNAUTHENTICATED
    - ZWAVE_S2_AUTHENTICATED
    - ZWAVE_S2_ACCESS_CONTROL
    - ZWAVE_S2_FAILED
    - ZWAVE_S0_FAILED
    - ZWAVE_S2_DOWNGRADE
    - ZWAVE_S0_DOWNGRADE
    default: UNKNOWN
    description: |
      For hub-connected devices on protocols with multiple security levels, the security level the device was added with.
      Values ZWAVE_S2_FAILED, ZWAVE_S0_FAILED, ZWAVE_S2_DOWNGRADE, and ZWAVE_S0_DOWNGRADE should be treated as failures
      and prompt the user to remove and re-add the device. Other Z-Wave values are success cases.
  DeviceComponentReference:
    type: object
    properties:
      id:
        type: string
        example: main
        format: ^[-_!.~'()*0-9a-zA-Z]{1,36}$
      capabilities:
        type: array
        minItems: 1
        maxItems: 20
        items:
          $ref: '#/definitions/CapabilityReference'
        description: A list of `[ 1..20 ]` capabilities for this component.
      categories:
        type: array
        items:
          $ref: '#/definitions/DeviceCategory'
    required:
    - id
    - capabilities
  DeviceProfileResponse:
    type: object
    properties:
      id:
        type: string
        example: a362ddb6-349b-4650-9911-681b51069a57
      name:
        type: string
        example: thermostat1.model1
      components:
        type: array
        items:
          $ref: '#/definitions/DeviceComponent'
      metadata:
        $ref: '#/definitions/DeviceProfileMetadata'
      status:
        $ref: '#/definitions/DeviceProfileStatus'
  PagedDeviceProfiles:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/DeviceProfileResponse'
      _links:
        $ref: '#/definitions/Links'
  DeviceProfileMetadata:
    additionalProperties:
      type: string
      format: ^[-_!.~'() *0-9a-zA-Z\\p{L}]{1,1024}$
    description: Additional information about the device profile, limited to 10 entries.
  UpdateDeviceProfileRequest:
    type: object
    properties:
      components:
        type: array
        minItems: 1
        maxItems: 20
        description: A list of `[ 1..20 ]` components for this profile.
        items:
          $ref: '#/definitions/DeviceComponentReference'
      metadata:
        $ref: '#/definitions/DeviceProfileMetadata'
  CreateDeviceProfileRequest:
    type: object
    properties:
      name:
        type: string
        format: ^(?!\s)[-_!.~'() *0-9a-zA-Z\p{L}]{1,100}(?<!\s)$
        minLength: 1
        maxLength: 100
        example: thermostat1.model1
        description: A name for the device profile.
      components:
        type: array
        minItems: 1
        maxItems: 20
        description: A list of components for this profile. Exactly 1 component ID
          must be `main`.
        items:
          $ref: '#/definitions/DeviceComponentReference'
      metadata:
        $ref: '#/definitions/DeviceProfileMetadata'
    required:
    - name
    - components
  DeleteDeviceProfileResponse:
    type: object
  DeviceProfileStatus:
    description: |
      The lifecycle status of a device profile.
      'DEVELOPMENT' - Device profile can be modified. The profile is only available to the developer and can only be used with a self-published app.
      'PUBLISHED' - Device profile can be shared with other users, but cannot be modified.
    type: string
    default: DEVELOPMENT
    enum:
    - DEVELOPMENT
    - PUBLISHED
  LocaleReference:
    type: object
    properties:
      tag:
        $ref: '#/definitions/LocaleTag'
  ComponentTranslations:
    description: A map of i18n translations.
    type: object
    properties:
      label:
        description: Short UTF-8 text used when displaying the component.
        type: string
        maxLength: 25
        example: Main
      description:
        description: UTF-8 text describing the component.
        type: string
        maxLength: 255
        example: The main component of the device.
  SmartAppEventRequest:
    type: object
    properties:
      name:
        description: An arbitrary name for the custom SmartApp event.  Typically useful
          as a hook for in-app routing.
        format: ^[a-zA-Z_]{1,36}$
        type: string
      attributes:
        description: |
          An arbitrary set of key / value pairs useful for passing any custom metadata.

          * Supports a maximum of 10 entries.
          * Maximum key length: 36 Unicode characters in UTF-8
          * Maximum value length: 256 Unicode characters in UTF-8
          * Allowed characters for *keys* are letters, plus the following special characters: `:`, `_`
          * Allowed characters for *values* are letters, whitespace, and numbers, plus the following special characters: `+`, `-`, `=`, `.`, `_`, `:`, `/`
          * If you need characters outside this allowed set, you can apply standard base-64 encoding.
        type: object
        additionalProperties:
          type: string
  SmartAppDashboardCardEventRequest:
    type: object
    description: |
      An event used to trigger a client action on a SmartApp dashboard card.
    properties:
      cardId:
        type: string
        description: A developer defined dashboard card ID.
        format: ^[a-z0-9.-_]{1,36}$
        example: my_dashboard_card
      lifecycle:
        $ref: '#/definitions/DashboardCardLifecycle'
  DashboardCardLifecycle:
    type: string
    enum:
    - UPDATE
    - DELETE
  PagedLocations:
    description: Represents a single page of Locations available in a user account.
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/PagedLocation'
      _links:
        $ref: '#/definitions/Links'
  PagedLocation:
    description: A slimmed down represenation of the Location model.
    type: object
    properties:
      locationId:
        type: string
        format: uuid
        description: The ID of the location.
      name:
        type: string
        description: A name given for the location (eg. Home)
    example:
      locationId: 6b3d1909-1e1c-43ec-adc2-5f941de4fbf9
      name: Home
  Location:
    type: object
    properties:
      locationId:
        type: string
        format: uuid
        description: The ID of the location.
      name:
        type: string
        description: A name given for the location (eg. Home)
      countryCode:
        type: string
        description: An ISO Alpha-3 country code.  (i.e. GBR, USA)
        example: USA
      latitude:
        type: number
        description: A geographical latitude.
      longitude:
        type: number
        description: A geographical longitude.
      regionRadius:
        type: integer
        format: int32
        description: The radius in meters around latitude and longitude which defines
          this location.
      temperatureScale:
        type: string
        description: The desired temperature scale used within location. Value can
          be F or C.
      timeZoneId:
        type: string
        description: |
          An ID matching the Java Time Zone ID of the location. Automatically generated if latitude and longitude have been
          provided.
      locale:
        description: An IETF BCP 47 language tag representing the chosen locale for
          this location.
        type: string
        example: en
      backgroundImage:
        description: Not currently in use.
        type: string
        example: null
      additionalProperties:
        description: Additional information about the location that allows SmartThings
          to further define your location.
        type: object
        additionalProperties:
          type: string
    example:
      locationId: 6b3d1909-1e1c-43ec-adc2-5f941de4fbf9
      name: Home
      countryCode: USA
      latitude: 45.00708112
      longitude: -93.11223629
      regionRadius: 150
      temperatureScale: F
      timeZoneId: America/Chicago
      locale: en
  CreateLocationRequest:
    type: object
    required:
    - name
    - countryCode
    properties:
      name:
        type: string
        description: A nickname given for the location (eg. Home)
        minLength: 1
        maxLength: 40
      countryCode:
        type: string
        description: An ISO Alpha-3 country code.  (i.e. GBR, USA)
      latitude:
        description: A geographical latitude.
        type: number
      longitude:
        description: A geographical longitude.
        type: number
      regionRadius:
        type: integer
        description: The radius in meters around latitude and longitude which defines
          this location.
      temperatureScale:
        type: string
        description: The desired temperature scale used within location. Value can
          be F or C.
      locale:
        description: An IETF BCP 47 language tag representing the chosen locale for
          this location.
        type: string
        example: en
      additionalProperties:
        description: Additional information about the location that allows SmartThings
          to further define your location.
        type: object
        additionalProperties:
          type: string
    example:
      name: Home
      countryCode: USA
      latitude: 45.00708112
      longitude: -93.11223629
      regionRadius: 150
      temperatureScale: F
      timeZoneId: America/Chicago
      locale: en
  UpdateLocationRequest:
    type: object
    required:
    - name
    properties:
      name:
        type: string
        description: A nickname for the location.
        minLength: 1
        maxLength: 40
      latitude:
        type: number
        description: A geographical latitude.
      longitude:
        type: number
        description: A geographical longitude.
      regionRadius:
        description: The radius in meters around latitude and longitude which defines
          this location.
        type: integer
      temperatureScale:
        type: string
        description: The desired temperature scale used within location. Value can
          be F or C.
      locale:
        description: An IETF BCP 47 language tag representing the chosen locale for
          this location.
        type: string
        example: en
      additionalProperties:
        description: Additional information about the location that allows SmartThings
          to further define your location.
        type: object
        additionalProperties:
          type: string
    example:
      name: Home
      temperatureScale: F
  DeleteLocationResponse:
    description: An empty object response.
    type: object
    example: {
      }
  PagedRooms:
    description: Represents a single page of Rooms available in a Location.
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Room'
      _links:
        $ref: '#/definitions/Links'
  Room:
    type: object
    properties:
      roomId:
        type: string
        format: uuid
        description: The ID of the room.
      locationId:
        type: string
        format: uuid
        description: The ID of the parent location.
      name:
        type: string
        description: A name given for the room (eg. Living Room)
      backgroundImage:
        description: Not currently in use.
        type: string
        example: null
    example:
      roomId: bdd8a15f-33d4-41fc-b33c-75ce85e99d24
      locationId: 6b3d1909-1e1c-43ec-adc2-5f941de4fbf9
      name: Living Room
  CreateRoomRequest:
    type: object
    required:
    - name
    properties:
      name:
        type: string
        description: A name given for the room (eg. Living Room)
        minLength: 1
        maxLength: 40
    example:
      name: Living Room
  UpdateRoomRequest:
    type: object
    required:
    - name
    properties:
      name:
        type: string
        description: A name for the room.
        minLength: 1
        maxLength: 40
    example:
      name: Living Room
  DeleteRoomResponse:
    description: An empty object response.
    type: object
    example: {
      }
  Mode:
    type: object
    properties:
      id:
        description: Globally unique id for the mode.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        example: 9206ea57-2e2e-414c-a792-9087117ca3d8
      label:
        description: A name provided by the User. Unique per location, updatable.
        type: string
        minLength: 1
        maxLength: 25
        example: Our House
      name:
        description: A name provided when the mode was created. The name is unique
          per location, and can not be updated.
        type: string
        format: ^[a-zA-Z0-9.-_]+$
        example: Home
    required:
    - id
    - label
    - name
  InstalledApp:
    type: object
    properties:
      installedAppId:
        description: The ID of the installed app.
        type: string
        format: uuid
      installedAppType:
        $ref: '#/definitions/InstalledAppType'
      installedAppStatus:
        $ref: '#/definitions/InstalledAppStatus'
      displayName:
        description: A user defined name for the installed app. May be null.
        type: string
        maxLength: 100
      appId:
        description: The ID of the app.
        type: string
      referenceId:
        description: |
          A reference to an upstream system.  For example, Behaviors would reference the behaviorId. May be null.
        type: string
      locationId:
        description: The ID of the location to which the installed app may belong.
        type: string
        format: uuid
      owner:
        $ref: '#/definitions/Owner'
      notices:
        type: array
        items:
          $ref: '#/definitions/Notice'
      createdDate:
        description: A UTC ISO-8601 Date-Time String
        type: string
        format: date-time
      lastUpdatedDate:
        description: A UTC ISO-8601 Date-Time String
        type: string
        format: date-time
      ui:
        type: object
        description: |
          A collection of settings to drive user interface in SmartThings clients.  Currently, only applicable for
          LAMBDA_SMART_APP and WEBHOOK_SMART_APP app types.
        properties:
          pluginId:
            type: string
            format: ^[a-zA-Z._]{1,99}$
          pluginUri:
            type: string
            format: uri
          dashboardCardsEnabled:
            type: boolean
          preInstallDashboardCardsEnabled:
            type: boolean
        required:
        - dashboardCardsEnabled
        - preInstallDashboardCardsEnabled
      iconImage:
        description: A default icon image for the app.
        type: object
        properties:
          url:
            format: uri
            type: string
            description: |
              A default icon image url for an app. https url required.
        example:
          url: https://smart-home-monitor.com/image
      classifications:
        type: array
        items:
          type: string
          enum:
          - AUTOMATION
          - SERVICE
          - DEVICE
          - CONNECTED_SERVICE
          - HIDDEN
          description: |
            An App maybe associated to many classifications.  A classification drives how the integration is presented
            to the user in the SmartThings mobile clients.  These classifications include:
            * AUTOMATION - Denotes an integration that should display under the "Automation" tab in mobile clients.
            * SERVICE - Denotes an integration that is classified as a "Service".
            * DEVICE - Denotes an integration that should display under the "Device" tab in mobile clients.
            * CONNECTED_SERVICE - Denotes an integration that should display under the "Connected Services" menu in mobile clients.
            * HIDDEN - Denotes an integration that should not display in mobile clients
        description: |
          An App maybe associated to many classifications.  A classification drives how the integration is presented
          to the user in the SmartThings mobile clients.  These classifications include:
          * AUTOMATION - Denotes an integration that should display under the "Automation" tab in mobile clients.
          * SERVICE - Denotes an integration that is classified as a "Service".
          * DEVICE - Denotes an integration that should display under the "Device" tab in mobile clients.
          * CONNECTED_SERVICE - Denotes an integration that should display under the "Connected Services" menu in mobile clients.
          * HIDDEN - Denotes an integration that should not display in mobile clients
      principalType:
        type: string
        enum:
        - LOCATION
        - USER_LEVEL
        description: Denotes the principal type to be used with the app.  Default
          is LOCATION.
      restrictionTier:
        type: integer
        description: Restriction tier of the install, if any.
      singleInstance:
        type: boolean
        default: false
        description: |
          Inform the installation systems that the associated app can only be installed once within a user's account.
    required:
    - installedAppId
    - installedAppType
    - installedAppStatus
    - appId
    - owner
    - notices
    - createdDate
    - lastUpdatedDate
    - classifications
    - principalType
    - singleInstance
    example:
      installedAppId: 8885b9c3-a50d-427e-ad07-d7a2f94421af
      installedAppType: WEBHOOK_SMART_APP
      installedAppStatus: PENDING
      displayName: Color App
      appId: fdd21b3e-5880-44c8-9f61-ce474814f587
      referenceId: c71b0a5b-7dab-41fe-b75f-7cf30246468e
      locationId: 4ae86cfc-63be-4bcc-8514-836c873b4d7a
      owner:
        ownerType: USER
        ownerId: 3f178632-79ed-4358-94de-280dbd7c206c
      notices:
      - USER_PAUSE
      - RECONFIGURE
      createdDate: 2017-05-19T12:39:37Z
      lastUpdatedDate: 2017-05-19T12:39:37Z
  InstallConfiguration:
    description: An configuration instance of an Installed App.
    type: object
    properties:
      installedAppId:
        description: The ID of the installed app.
        type: string
        format: uuid
      configurationId:
        description: The ID to this configration instance.
        type: string
        format: uuid
      configurationStatus:
        $ref: '#/definitions/InstallConfigurationStatus'
      createdDate:
        description: A UTC ISO-8601 Date-Time String
        type: string
        format: date-time
      lastUpdatedDate:
        description: A UTC ISO-8601 Date-Time String
        type: string
        format: date-time
    example:
      installedAppId: 8885b9c3-a50d-427e-ad07-d7a2f94421af
      configurationId: c71b0a5b-7dab-41fe-b75f-7cf30246468e
      configurationStatus: DONE
      createdDate: 2017-05-19T12:39:37Z
      lastUpdatedDate: 2017-05-19T12:39:37Z
  InstallConfigurationDetail:
    description: Encompasses both a configuration value, and any required permissions
      that maybe needed.
    type: object
    properties:
      installedAppId:
        description: The ID of the installed app.
        type: string
        format: uuid
      configurationId:
        description: The ID to this configration instance.
        type: string
        format: uuid
      configurationStatus:
        $ref: '#/definitions/InstallConfigurationStatus'
      config:
        $ref: '#/definitions/ConfigMap'
      createdDate:
        description: A UTC ISO-8601 Date-Time String
        type: string
        format: date-time
      lastUpdatedDate:
        description: A UTC ISO-8601 Date-Time String
        type: string
        format: date-time
    example:
      installedAppId: 8885b9c3-a50d-427e-ad07-d7a2f94421af
      configurationId: c71b0a5b-7dab-41fe-b75f-7cf30246468e
      configurationStatus: AUTHORIZED
      createdDate: 2017-05-19T12:39:37Z
      lastUpdatedDate: 2017-05-19T12:39:37Z
      config:
        switches:
        - valueType: DEVICE
          deviceConfig:
            deviceId: 5ccbf4ba-7b5f-4eb3-85b8-ab8705ff8d61
            componentId: main
            permissions:
            - r:devices:5ccbf4ba-7b5f-4eb3-85b8-ab8705ff8d61
  StringConfig:
    description: A simple string configuration.
    type: object
    properties:
      value:
        description: A config value
        type: string
        maxLength: 2048
    example:
      value: 31192dc9-eb45-4d90-b606-21e9b66d8c2b
  DeviceConfig:
    description: A device and component configuration with any required permissions.
    type: object
    properties:
      deviceId:
        description: The ID of the device.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      componentId:
        description: The component ID on the device.
        type: string
        format: ^[-_!.~'()*0-9a-zA-Z]{1,36}$
      permissions:
        type: array
        items:
          type: string
        maxItems: 25
    example:
      deviceId: 31192dc9-eb45-4d90-b606-21e9b66d8c2b
      componentId: main
      permissions:
      - r:devices:31192dc9-eb45-4d90-b606-21e9b66d8c2b
  PermissionConfig:
    description: Required permissions for the installed app.
    type: object
    properties:
      permissions:
        type: array
        items:
          type: string
        minItems: 1
        maxItems: 25
    example:
      permissions:
      - w:notifications
      - r:devices:*
  ModeConfig:
    description: A mode configuration.
    type: object
    properties:
      modeId:
        description: The ID of the mode.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
    example:
      modeId: 9206ea57-2e2e-414c-a792-9087117ca3d8
  SceneConfig:
    description: A scene configuration.
    type: object
    properties:
      sceneId:
        description: The ID of the scene.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      permissions:
        type: array
        items:
          type: string
        maxItems: 25
    example:
      sceneId: 9206ea57-2e2e-414c-a792-9087117ca3d8
      permissions:
      - x:scences:9206ea57-2e2e-414c-a792-9087117ca3d8
  MessageConfig:
    description: A message configuration.
    type: object
    properties:
      messageGroupKey:
        description: The key value of the message group.
        type: string
        format: ^[a-zA-Z0-9._]{1,36}$
    example:
      messageGroupKey: leaks
  ConfigEntry:
    description: A configuration value type and the correspodning configuration.
    type: object
    properties:
      valueType:
        type: string
        enum:
        - STRING
        - DEVICE
        - PERMISSION
        - MODE
        - SCENE
        - MESSAGE
        description: The value type.
      stringConfig:
        description: The config if valueType is STRING, meaningless otherwise
        $ref: '#/definitions/StringConfig'
      deviceConfig:
        description: The config if valueType is DEVICE, meaningless otherwise
        $ref: '#/definitions/DeviceConfig'
      permissionConfig:
        description: The config if valueType is PERMISSION, meaningless otherwise
        $ref: '#/definitions/PermissionConfig'
      modeConfig:
        description: The config if valueType is MODE, meaningless otherwise
        $ref: '#/definitions/ModeConfig'
      sceneConfig:
        description: The config if valueType is SCENE, meaningless otherwise
        $ref: '#/definitions/SceneConfig'
      messageConfig:
        description: The config if valueType is MESSAGE, meaningless otherwise
        $ref: '#/definitions/MessageConfig'
    example:
      valueType: DEVICE
      deviceConfig:
        deviceId: 31192dc9-eb45-4d90-b606-21e9b66d8c2b
        componentId: main
        permissions:
        - r:devices:31192dc9-eb45-4d90-b606-21e9b66d8c2b
  ConfigEntries:
    description: A list of available configuration values.
    type: array
    items:
      $ref: '#/definitions/ConfigEntry'
  ConfigMap:
    description: |
      A multi-map of configurations for an Installed App.  The map 'key' is the configuration name
      and the 'value' is an array of ConfigEntry models each containing a value and associated permissions.  The config
      key is alpha-numeric, may contain dashes, underscores, periods, and must be less then 50 characters long.
    type: object
    additionalProperties:
      $ref: '#/definitions/ConfigEntries'
    example:
      switches:
      - valueType: DEVICE
        deviceConfig:
          deviceId: 31192dc9-eb45-4d90-b606-21e9b66d8c2b
          componentId: main
          permissions:
          - r:devices:31192dc9-eb45-4d90-b606-21e9b66d8c2b
      - valueType: DEVICE
        deviceConfig:
          deviceId: bea6074d-7dde-4936-ab79-373fa13250d4
          componentId: main
          permissions:
          - r:devices:bea6074d-7dde-4936-ab79-373fa13250d4
      color:
      - valueType: STRING
        stringConfig:
          value: null
  InstalledAppType:
    description: Denotes the type of installed app.
    type: string
    enum:
    - LAMBDA_SMART_APP
    - WEBHOOK_SMART_APP
  InstallConfigurationStatus:
    description: |
      Denotes the current state of a configuration instance.  'STAGED' configuration is used during active
      modification to config.  A configuration is marked 'DONE' once it is deemed finished.  At this point it
      is immutable, meaning it can't be changed.  A status of 'AUTHORIZED' means the apps permissions have been
      authorized by the consumer.  Installed Apps in 'AUTHORIZED' state are fully installed and used by the
      SmartThings platform.  A status of 'REVOKED' means the apps permissions have been revoked.
    type: string
    enum:
    - STAGED
    - DONE
    - AUTHORIZED
    - REVOKED
  InstalledAppStatus:
    description: |
      Denotes the current state of an install.  'PENDING' is used during active modification to the install's config
      prior to 'AUTHORIZATION'. A status of 'AUTHORIZED' means the install's permissions have been authorized by the
      consumer. Installed Apps in 'AUTHORIZED' state are fully installed and usable by the SmartThings platform.  A
      status of 'REVOKED' means the install's permissions have been revoked.  A status of 'DISABLED' means a previously
      'AUTHORIZED' Installed App will not execute.
    type: string
    enum:
    - PENDING
    - AUTHORIZED
    - REVOKED
    - DISABLED
  PagedInstalledApps:
    description: Represents a single page of InstalledApps available in a user account.
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/InstalledApp'
      _links:
        $ref: '#/definitions/Links'
  PagedInstallConfigurations:
    description: Represents a single page of InstallConfiguration models available
      for an InstalledApp.
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/InstallConfiguration'
      _links:
        $ref: '#/definitions/Links'
  DeleteInstalledAppResponse:
    description: The number of deleted installed apps.
    type: object
    properties:
      count:
        type: integer
        format: int32
  CreateInstalledAppEventsRequest:
    type: object
    properties:
      smartAppEvents:
        description: |
          An array of smartapp events used to trigger client behavior in loaded web plugin detail pages.  Events will
          be delivered to JavaScript event handler of all active client processes related to parameterized installed app.
        type: array
        minItems: 1
        maxItems: 8
        items:
          $ref: '#/definitions/SmartAppEventRequest'
      smartAppDashboardCardEvents:
        description: |
          An array of smartapp dashboard card events used to trigger client behavior for dashboard cards.
          Dashboard card events are directives to a SmartThings client to take actions in relation to lifecycle changes
          to a specific dashboard card.  These events are not delivered to the web plugin event handler.
        type: array
        minItems: 1
        maxItems: 8
        items:
          $ref: '#/definitions/SmartAppDashboardCardEventRequest'
  CreateInstalledAppEventsResponse:
    type: object
  Notice:
    type: object
    properties:
      code:
        $ref: '#/definitions/NoticeCode'
      badgeUrl:
        description: The url of the badge icon for the notice card
        type: string
      message:
        type: string
        description: The localized message to be displayed
      actions:
        type: array
        description: The action(s) a user can take to resolve this notice
        items:
          $ref: '#/definitions/NoticeAction'
  NoticeCode:
    description: |
      * USER_PAUSE - Denotes installed app is paused by the user and user action is required to unpause it.
      * REVISIT - Denotes installed app is still running and user action may be required to reconcile a configuration.
      * RECONFIGURE - Denotes installed app is no longer running and user action is required to resolve a configuration issue.
    type: string
    enum:
    - USER_PAUSE
    - REVISIT
    - RECONFIGURE
  NoticeAction:
    type: string
    description: An action the user can take to resolve a notice
    default: none
    enum:
    - DISMISS
    - EDIT
    - NONE
  OnceSchedule:
    properties:
      time:
        description: The time in millis from jan 1 1970 UTC for ONCE schedules. Must
          be less than 2 years from now.
        type: integer
        format: int64
      overwrite:
        type: boolean
    required:
    - time
  CronSchedule:
    properties:
      expression:
        description: |
          The cron expression for the schedule for CRON schedules.
          The format matches that specified by the [Quartz scheduler](http://www.quartz-scheduler.org/documentation/quartz-2.x/tutorials/crontrigger.html) but should not include the seconds (1st)
          field. The exact second will be chosen at random but will remain consistent. The years part must be les than 2 years from now.
        type: string
        example: 15 10 * * ? *
        maxLength: 256
      timezone:
        description: The timezone id for CRON schedules.
        example: GMT
        type: string
    required:
    - expression
    - timezone
  ScheduleRequest:
    properties:
      once:
        $ref: '#/definitions/OnceSchedule'
      name:
        type: string
        minLength: 1
        maxLength: 36
        description: The unique per installed app name of the schedule.
        example: on_schedule-1
        format: ^[A-Za-z0-9._\-]{1,36}$
      cron:
        $ref: '#/definitions/CronSchedule'
    required:
    - name
    example:
      name: on_schedule_1
      cron:
        expression: 15 10 * * ? *
        timezone: GMT
  Schedule:
    properties:
      installedAppId:
        description: The ID of the installed app.
        type: string
        format: uuid
        example: 736e3903-001c-4d40-b408-ff40d162a06b
      locationId:
        description: The ID of the location the installed app is in.
        type: string
        format: uuid
        example: 35451c7a-cc23-4838-8a3b-1205090cf161
      scheduledExecutions:
        description: list of scheduled execution times in millis from jan 1 1970 UTC
        type: array
        items:
          type: integer
          format: int64
          example: 1490892856362
      name:
        type: string
        minLength: 1
        maxLength: 36
        description: The unique per installed app name of the schedule.
        example: on_schedule-1
        format: ^[A-Za-z0-9._\-]{1,36}$
      cron:
        $ref: '#/definitions/CronSchedule'
    required:
    - name
    example:
      installedAppId: 736e3903-001c-4d40-b408-ff40d162a06b
      scheduledExecutions:
      - 1490892856362
      name: on_schedule-1
      cron:
        expression: 15 10 * * ? *
        timezone: GMT
  PagedSchedules:
    description: An array of schedules
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Schedule'
      _links:
        $ref: '#/definitions/Links'
    example:
      items:
      - scheduledExecutions:
        - 1505752823000
        name: schedule-name
        cron:
          expression: 0/10 * * * ? *
          timezone: America/Chicago
        installedAppId: 937e11d5-317d-445f-bec7-3055fdb827a3
        locationId: 8418eebd-8d5f-48dd-a028-054744j8secb
      _links:
        next: null
        previous: null
  DeleteScheduleResponse:
    type: object
    description: Delete schedule response
  Subscription:
    properties:
      id:
        description: The id of the subscription.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        example: 736e3903-001c-4d40-b408-ff40d162a06b
      installedAppId:
        description: The id of the subscribing app.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        example: 499e28ba-b33b-49c9-a5a1-cce40e41f8a6
      sourceType:
        $ref: '#/definitions/SubscriptionSource'
      device:
        $ref: '#/definitions/DeviceSubscriptionDetail'
      capability:
        $ref: '#/definitions/CapabilitySubscriptionDetail'
      mode:
        $ref: '#/definitions/ModeSubscriptionDetail'
      deviceLifecycle:
        $ref: '#/definitions/DeviceLifecycleDetail'
      deviceHealth:
        $ref: '#/definitions/DeviceHealthDetail'
      securityArmState:
        $ref: '#/definitions/SecurityArmStateDetail'
      hubHealth:
        $ref: '#/definitions/HubHealthDetail'
      sceneLifecycle:
        $ref: '#/definitions/SceneLifecycleDetail'
    example:
      id: 5e1b134b-bd85-4125-9c25-4a8291e754aa
      installedAppId: fb05c874-cf1d-406a-930c-69a081e0eaee
      sourceType: DEVICE
      device:
        componentId: main
        deviceId: e457978e-5e37-43e6-979d-18112e12c961,
        capability: contactSensor,
        attribute: contact,
        stateChangeOnly: true,
        subscriptionName: contact_subscription',
        value: '*'
  SubscriptionSource:
    description: The type of the event that is being subscribed to.
    type: string
    enum:
    - DEVICE
    - CAPABILITY
    - MODE
    - DEVICE_LIFECYCLE
    - DEVICE_HEALTH
    - SECURITY_ARM_STATE
    - HUB_HEALTH
    - SCENE_LIFECYCLE
  SubscriptionRequest:
    type: object
    properties:
      sourceType:
        $ref: '#/definitions/SubscriptionSource'
      device:
        $ref: '#/definitions/DeviceSubscriptionDetail'
      capability:
        $ref: '#/definitions/CapabilitySubscriptionDetail'
      mode:
        $ref: '#/definitions/ModeSubscriptionDetail'
      deviceLifecycle:
        $ref: '#/definitions/DeviceLifecycleDetail'
      deviceHealth:
        $ref: '#/definitions/DeviceHealthDetail'
      securityArmState:
        $ref: '#/definitions/SecurityArmStateDetail'
      hubHealth:
        $ref: '#/definitions/HubHealthDetail'
      sceneLifecycle:
        $ref: '#/definitions/SceneLifecycleDetail'
    required:
    - sourceType
    example:
      sourceType: DEVICE
      device:
        deviceId: 736e3903-001c-4d40-b408-ff40d162a06b
        componentId: freezer
        capability: temperatureMeasurement
        attribute: temperature
        stateChangeOnly: true
        modes:
        - e34b57fb-e73a-4228-8819-e99502d17890
        - cfa3a42e-5f52-452e-9515-c32bcbea48ce
  DeviceSubscriptionDetail:
    description: Details of a subscription of source type DEVICE. The combination
      of subscribed values must be unique per installed app.
    type: object
    properties:
      deviceId:
        description: The GUID of the device that is subscribed to.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        example: 35451c7a-cc23-4838-8a3b-1205090cf161
      componentId:
        type: string
        format: ^[-_!.~'()*0-9a-zA-Z]{1,36}$
        description: The component ID on the device that is subscribed to or * for
          all.
        example: main
        default: '*'
      capability:
        type: string
        minLength: 1
        maxLength: 128
        description: Name of the capability that is subscribed to or * for all.
        example: switch
        default: '*'
      attribute:
        type: string
        minLength: 1
        maxLength: 256
        description: Name of the capabilities attribute or * for all.
        example: switch
        default: '*'
      value:
        type: object
        maxLength: 256
        description: A particular value for the attribute that will trigger the subscription
          or * for all.
        default: '*'
        example:
        - '*'
        - 1
        - 'on'
        - key: 30
      stateChangeOnly:
        type: boolean
        description: Only execute the subscription if the subscribed event is a state
          change from previous events.
      subscriptionName:
        description: A name for the subscription that will be passed to the installed
          app. Must be unique per installed app.
        type: string
        format: ^[-_!.~'()*0-9a-zA-Z]{1,36}$
      modes:
        description: List of mode ID's that the subscription will execute for. If
          not provided then all modes will be supported.
        type: array
        items:
          description: Mode ID
          type: string
          format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
    required:
    - deviceId
  CapabilitySubscriptionDetail:
    description: Details of a subscription of source type CAPABILITY. The combination
      of subscribed values must be unique per installed app.
    type: object
    properties:
      locationId:
        description: The id of the location that both the app and source device are
          in.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      capability:
        type: string
        minLength: 1
        maxLength: 128
        description: Name of the capability that is subscribed to.
        example: switch
      attribute:
        type: string
        minLength: 1
        maxLength: 256
        description: Name of the capabilities attribute or * for all.
        example: switch
        default: '*'
      value:
        type: object
        maxLength: 256
        description: A particular value for the attribute that will trigger the subscription
          or * for all.
        example:
        - '*'
        - 1
        - 'on'
        - key: 30
        default: '*'
      stateChangeOnly:
        type: boolean
        default: true
        description: Only execute the subscription if the subscribed event is a state
          change from previous events.
      subscriptionName:
        description: A name for the subscription that will be passed to the installed
          app. Must be unique per installed app.
        type: string
        format: ^[-_!.~'()*0-9a-zA-Z]{1,36}$
      modes:
        description: List of modes that the subscription will execute for. If not
          provided then all modes will be supported.
        type: array
        items:
          description: Mode ID
          type: string
          format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
    required:
    - locationId
    - capability
  SubscriptionDelete:
    description: The number of deleted subscriptions
    type: object
    properties:
      count:
        type: integer
        format: int32
  PagedSubscriptions:
    description: An array of subscriptions
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Subscription'
      _links:
        $ref: '#/definitions/Links'
  ModeSubscriptionDetail:
    description: Details of a subscription of source type MODE. This will subscribe
      to all mode changes for the given location. The installed app can then act on
      the resulting mode change event accordingly.
    type: object
    properties:
      locationId:
        description: The GUID for the location to subscribe to mode changes.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        example: 9f24edfd-f2e5-4a82-8a24-c1955ee46419
    required:
    - locationId
  DeviceLifecycleDetail:
    description: Details of a subscription of source type DEVICE_LIFECYCLE. Only one
      of deviceIds or locationId should be supplied.
    type: object
    properties:
      deviceIds:
        description: An array of GUIDs of devices being subscribed to. A max of 20
          GUIDs are allowed.
        type: array
        items:
          description: Device ID
          type: string
          format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        maxItems: 20
      subscriptionName:
        description: A name for the subscription that will be passed to the installed
          app.
        type: string
        format: ^[-_!.~'()*0-9a-zA-Z]{1,36}$
      locationId:
        description: The id of the location that both the app and source device are
          in.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  DeviceHealthDetail:
    description: Details of a subscription of source type DEVICE_HEALTH. Only one
      of deviceIds or locationId should be supplied.
    type: object
    properties:
      deviceIds:
        description: An array of GUIDs of devices being subscribed to. A max of 20
          GUIDs are allowed.
        type: array
        items:
          description: Device ID
          type: string
          format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        maxItems: 20
      subscriptionName:
        description: A name for the subscription that will be passed to the installed
          app.
        type: string
        format: ^[-_!.~'()*0-9a-zA-Z]{1,36}$
      locationId:
        description: The id of the location that both the app and source device are
          in.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  SecurityArmStateDetail:
    description: Details of a subscription of souce type SECURITY_ARM_STATE
    type: object
    properties:
      subscriptionName:
        description: A name for the subscription that will be passed to the installed
          app.
        type: string
        format: ^[-_!.~'()*0-9a-zA-Z]{1,36}$
      locationId:
        description: The id of the location that both the app and the security system
          are in.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
    required:
    - locationId
  HubHealthDetail:
    description: Details of a subscription of souce type HUB_HEALTH
    type: object
    properties:
      subscriptionName:
        description: A name for the subscription that will be passed to the installed
          app.
        type: string
        format: ^[-_!.~'()*0-9a-zA-Z]{1,36}$
      locationId:
        description: The id of the location that both the app and hubs are in
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
    required:
    - locationId
  SceneLifecycleDetail:
    description: Details of a subscription of source type SCENE_LIFECYCLE.
    type: object
    properties:
      subscriptionName:
        description: A name for the subscription that will be passed to the installed
          app.
        type: string
        format: ^[-_!.~'()*0-9a-zA-Z]{1,36}$
      locationId:
        description: The id of the location that both the app and scenes are in.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
    required:
    - locationId
  SubscriptionId:
    type: string
    description: The subscription id of the subscription.
    format: uuid
  SubscriptionFilters:
    description: An array of subscription filters
    type: array
    items:
      $ref: '#/definitions/SubscriptionFilter'
  SubscriptionFilter:
    type: object
    properties:
      type:
        $ref: '#/definitions/SubscriptionFilterTypes'
      value:
        $ref: '#/definitions/SubscriptionFilterValues'
      eventType:
        $ref: '#/definitions/SubscriptionFilterEventTypes'
      attribute:
        $ref: '#/definitions/SubscriptionFilterAttributes'
      capability:
        $ref: '#/definitions/SubscriptionFilterCapabilities'
      component:
        $ref: '#/definitions/SubscriptionFilterComponents'
  SubscriptionFilterTypes:
    type: string
    enum:
    - LOCATIONIDS
    - ROOMIDS
    - DEVICEIDS
    - INSTALLEDSMARTAPPIDS
    - SMARTAPPIDS
    description: The type of filter
  SubscriptionFilterValues:
    type: array
    items:
      type: string
    description: An array of subscription filter values.
  SubscriptionFilterEventTypes:
    type: array
    items:
      type: string
  SubscriptionFilterAttributes:
    type: array
    items:
      type: string
  SubscriptionFilterCapabilities:
    type: array
    items:
      type: string
  SubscriptionFilterComponents:
    type: array
    items:
      type: string
  SubscriptionTarget:
    type: object
    properties:
      url:
        $ref: '#/definitions/SubscriptionTargetValue'
  SubscriptionTargetValue:
    type: string
    description: The address to send events to.
    format: uri
  PagedApps:
    type: object
    description: Represents a single page of Apps available in an account.
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/PagedApp'
      _links:
        $ref: '#/definitions/Links'
  PagedApp:
    type: object
    properties:
      appName:
        type: string
        description: |
          A user defined unique identifier for an app.  It is alpha-numeric, may contain dashes,
          underscores, periods, and be less then 250 characters long.  It must be unique within your account.
        format: ^[a-z0-9.-_]{1,250}$
      appId:
        type: string
        format: uuid
        description: A globally unique identifier for an app.
      appType:
        $ref: '#/definitions/AppType'
      classifications:
        type: array
        items:
          $ref: '#/definitions/AppClassification'
        description: |
          An App maybe associated to many classifications.  A classification drives how the integration is presented
          to the user in the SmartThings mobile clients.  These classifications include:
          * AUTOMATION - Denotes an integration that should display under the "Automation" tab in mobile clients.
          * SERVICE - Denotes an integration that is classified as a "Service".
          * DEVICE - Denotes an integration that should display under the "Device" tab in mobile clients.
          * CONNECTED_SERVICE - Denotes an integration that should display under the "Connected Services" menu in mobile clients.
          * HIDDEN - Denotes an integration that should not display in mobile clients
      displayName:
        type: string
        maxLength: 75
        description: |
          A default display name for an app.
      description:
        type: string
        maxLength: 250
        description: |
          A default description for an app.
      iconImage:
        $ref: '#/definitions/IconImage'
      owner:
        $ref: '#/definitions/Owner'
      createdDate:
        type: string
        format: date-time
        description: A UTC ISO-8601 Date-Time String
      lastUpdatedDate:
        type: string
        format: date-time
        description: A UTC ISO-8601 Date-Time String
    example:
      appName: security-home-monitor
      appId: c71b0a5b-7dab-41fe-b75f-7cf30246468e
      appType: WEBHOOK_SMART_APP
      displayName: Security Home Monitor
      description: |
        An intergration that leverages all security devices in your home - cameras, motion sensors, etc to provide
        you with peace of mind and #security.
      iconImage:
        url: https://smart-home-monitor.com/image
      owner:
        ownerType: USER
        ownerId: 3f178632-79ed-4358-94de-280dbd7c206c
      createdDate: 2017-05-19T12:39:37Z
      lastUpdatedDate: 2017-05-19T12:39:37Z
  IconImage:
    description: A default icon image for the app.
    type: object
    properties:
      url:
        format: uri
        type: string
        description: |
          A default icon image url for an app. https url required.
    example:
      url: https://smart-home-monitor.com/image
  AppType:
    type: string
    enum:
    - LAMBDA_SMART_APP
    - WEBHOOK_SMART_APP
    description: Denotes the type of app.
  AppClassification:
    type: string
    enum:
    - AUTOMATION
    - SERVICE
    - DEVICE
    - CONNECTED_SERVICE
    - HIDDEN
    description: |
      An App maybe associated to many classifications.  A classification drives how the integration is presented
      to the user in the SmartThings mobile clients.  These classifications include:
      * AUTOMATION - Denotes an integration that should display under the "Automation" tab in mobile clients.
      * SERVICE - Denotes an integration that is classified as a "Service".
      * DEVICE - Denotes an integration that should display under the "Device" tab in mobile clients.
      * CONNECTED_SERVICE - Denotes an integration that should display under the "Connected Services" menu in mobile clients.
      * HIDDEN - Denotes an integration that should not display in mobile clients
  AppRegisterRequest:
    type: object
    description: |
      Prepares to subscribe an endpoint by sending the endpoint a confirmation message
  AppRegisterResponse:
    type: object
    description: A response object for successful app registration push.
  App:
    type: object
    properties:
      appName:
        type: string
        description: |
          A user defined unique identifier for an app.  It is alpha-numeric, may contain dashes,
          underscores, periods, and be less then 250 characters long.  It must be unique within your account.
        format: ^[a-z0-9.-_]{1,250}$
      appId:
        type: string
        format: uuid
        description: A globally unique identifier for an app.
      appType:
        $ref: '#/definitions/AppType'
      principalType:
        $ref: '#/definitions/PrincipalType'
      classifications:
        type: array
        items:
          $ref: '#/definitions/AppClassification'
        description: |
          An App maybe associated to many classifications.  A classification drives how the integration is presented
          to the user in the SmartThings mobile clients.  These classifications include:
          * AUTOMATION - Denotes an integration that should display under the "Automation" tab in mobile clients.
          * SERVICE - Denotes an integration that is classified as a "Service".
          * DEVICE - Denotes an integration that should display under the "Device" tab in mobile clients.
          * CONNECTED_SERVICE - Denotes an integration that should display under the "Connected Services" menu in mobile clients.
          * HIDDEN - Denotes an integration that should not display in mobile clients
      displayName:
        type: string
        maxLength: 75
        description: |
          A default display name for an app.
      description:
        type: string
        maxLength: 250
        description: |
          A default description for an app.
      singleInstance:
        type: boolean
        default: false
        description: |
          Inform the installation systems that a particular app can only be installed once within a user's account.
      iconImage:
        $ref: '#/definitions/IconImage'
      installMetadata:
        description: System generated metadata that impacts eligibility requirements
          around installing an App.
        type: object
        additionalProperties:
          type: string
      owner:
        $ref: '#/definitions/Owner'
      createdDate:
        type: string
        format: date-time
        description: A UTC ISO-8601 Date-Time String
      lastUpdatedDate:
        type: string
        format: date-time
        description: A UTC ISO-8601 Date-Time String
      lambdaSmartApp:
        $ref: '#/definitions/LambdaSmartApp'
      webhookSmartApp:
        $ref: '#/definitions/WebhookSmartApp'
      ui:
        $ref: '#/definitions/AppUISettings'
    example:
      appName: security-home-monitor
      appId: c71b0a5b-7dab-41fe-b75f-7cf30246468e
      appType: WEBHOOK_SMART_APP
      classifications:
      - AUTOMATION
      displayName: Security Home Monitor
      description: |
        An intergration that leverages all security devices in your home - cameras, motion sensors, etc to provide
        you with peace of mind and #security.
      iconImage:
        url: https://smart-home-monitor.com/image
      installMetadata:
        certified: 'true'
        maxInstalls: '-1'
      owner:
        ownerType: USER
        ownerId: 3f178632-79ed-4358-94de-280dbd7c206c
      webhookSmartApp:
        targetUrl: https://securityhome.com/smartthings
        publicKey: |
          -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlz00iTNPXIo+RM8n0Eudnh84XDWBFAkR
          L7mkOtXvZiKViCR1qs5LT3SaNy62hkUroexCoii4vjRTSHaQ9FwyBRo98EY9U3qzWmr9Row9ONcQ
          VKFVX6qiwb9SZG7QvHSfqVAuWhMGb1fFGUWl94L7kY0CihF+WJS5fdhXc1h/f/tY1439hruL3+BR
          /idfYjAKDa1+euW4b0HKMi4BdJutL/G5FXjDP7MP5fTRuM52erKpON1pwPD8ow/03MhK4wRikHqS
          /Kvd3UnQ8Q7OSrfJevqR0CqBf83Am1HSHh/bqOfsG0epl+2I1RKLBzB2tSTvMfk0ftiRSq/fRrhl
          xsJmFQIDAQAB
          -----END PUBLIC KEY-----
      createdDate: 2017-05-19T12:39:37Z
      lastUpdatedDate: 2017-05-19T12:39:37Z
  LambdaSmartApp:
    description: |
      Details related to a Lambda Smart App implementation.  This model will only be available for apps of type LAMBDA_SMART_APP.
    type: object
    properties:
      functions:
        type: array
        items:
          type: string
        description: A list of AWS arns referencing a Lambda function.
  WebhookSmartApp:
    description: |
      Details related to a Webhook Smart App implementation.  This model will only be available for apps of type WEBHOOK_SMART_APP.
    type: object
    properties:
      targetUrl:
        type: string
        description: A URL that should be invoked during execution.
      targetStatus:
        $ref: '#/definitions/AppTargetStatus'
      publicKey:
        type: string
        description: |
          The public half of an RSA key pair.  Useful for verifying a Webhook execution request signature to
          ensure it came from SmartThings.
      signatureType:
        $ref: '#/definitions/SignatureType'
    example:
      appName: security-home-monitor
      appId: c71b0a5b-7dab-41fe-b75f-7cf30246468e
      appType: WEBHOOK_SMART_APP
      owner:
        ownerType: USER
        ownerId: 3f178632-79ed-4358-94de-280dbd7c206c
      targetUrl: https://securityhome.com/smartthings
      targetStatus: CONFIRMED
      publicKey: |
        -----BEGIN PUBLIC KEY-----
        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlz00iTNPXIo+RM8n0Eudnh84XDWBFAkR
        L7mkOtXvZiKViCR1qs5LT3SaNy62hkUroexCoii4vjRTSHaQ9FwyBRo98EY9U3qzWmr9Row9ONcQ
        VKFVX6qiwb9SZG7QvHSfqVAuWhMGb1fFGUWl94L7kY0CihF+WJS5fdhXc1h/f/tY1439hruL3+BR
        /idfYjAKDa1+euW4b0HKMi4BdJutL/G5FXjDP7MP5fTRuM52erKpON1pwPD8ow/03MhK4wRikHqS
        /Kvd3UnQ8Q7OSrfJevqR0CqBf83Am1HSHh/bqOfsG0epl+2I1RKLBzB2tSTvMfk0ftiRSq/fRrhl
        xsJmFQIDAQAB
        -----END PUBLIC KEY-----
      signatureType: APP_RSA
  AppOAuth:
    type: object
    properties:
      clientName:
        description: A name given to the OAuth Client.
        type: string
      scope:
        description: A list of SmartThings API OAuth scope identifiers that maybe
          required to execute your integration.
        type: array
        items:
          type: string
      redirectUris:
        description: A list of redirect URIs.
        type: array
        items:
          type: string
          format: uri
        minItems: 0
        maxItems: 10
    example:
      clientName: My SmartThings Integration
      scope:
      - r:installedapps
      - w:installedapps
      - x:installedapps
  CreateAppRequest:
    required:
    - appName
    - appType
    - classifications
    - displayName
    - description
    type: object
    properties:
      appName:
        type: string
        description: |
          A globally unique, developer-defined identifier for an app. It is alpha-numeric, may contain dashes,
          underscores, periods, and must be less then 250 characters long.
        format: ^[a-z0-9.-_]{1,250}$
      displayName:
        type: string
        maxLength: 75
        description: |
          A default display name for an app.
      description:
        type: string
        maxLength: 250
        description: |
          A default description for an app.
      singleInstance:
        type: boolean
        default: false
        description: |
          Inform the installation systems that a particular app can only be installed once within a user's account.
      iconImage:
        $ref: '#/definitions/IconImage'
      appType:
        $ref: '#/definitions/AppType'
      principalType:
        $ref: '#/definitions/PrincipalType'
      classifications:
        type: array
        items:
          $ref: '#/definitions/AppClassification'
        description: |
          An App maybe associated to many classifications.  A classification drives how the integration is presented
          to the user in the SmartThings mobile clients.  These classifications include:
          * AUTOMATION - Denotes an integration that should display under the "Automation" tab in mobile clients.
          * SERVICE - Denotes an integration that is classified as a "Service".
          * DEVICE - Denotes an integration that should display under the "Device" tab in mobile clients.
          * CONNECTED_SERVICE - Denotes an integration that should display under the "Connected Services" menu in mobile clients.
          * HIDDEN - Denotes an integration that should not display in mobile clients
      lambdaSmartApp:
        $ref: '#/definitions/CreateOrUpdateLambdaSmartAppRequest'
      webhookSmartApp:
        $ref: '#/definitions/CreateOrUpdateWebhookSmartAppRequest'
      oauth:
        $ref: '#/definitions/AppOAuth'
      ui:
        $ref: '#/definitions/AppUISettings'
  UpdateAppRequest:
    required:
    - appType
    - classifications
    - displayName
    - description
    type: object
    properties:
      displayName:
        type: string
        maxLength: 75
        description: |
          A default display name for an app.
      description:
        type: string
        maxLength: 250
        description: |
          A default description for an app.
      singleInstance:
        type: boolean
        default: false
        description: |
          Inform the installation systems that a particular app can only be installed once within a user's account.
      iconImage:
        $ref: '#/definitions/IconImage'
      appType:
        $ref: '#/definitions/AppType'
      classifications:
        type: array
        items:
          $ref: '#/definitions/AppClassification'
        description: |
          An App maybe associated to many classifications.  A classification drives how the integration is presented
          to the user in the SmartThings mobile clients.  These classifications include:
          * AUTOMATION - Denotes an integration that should display under the "Automation" tab in mobile clients.
          * SERVICE - Denotes an integration that is classified as a "Service".
          * DEVICE - Denotes an integration that should display under the "Device" tab in mobile clients.
          * CONNECTED_SERVICE - Denotes an integration that should display under the "Connected Services" menu in mobile clients.
          * HIDDEN - Denotes an integration that should not display in mobile clients
      lambdaSmartApp:
        $ref: '#/definitions/CreateOrUpdateLambdaSmartAppRequest'
      webhookSmartApp:
        $ref: '#/definitions/CreateOrUpdateWebhookSmartAppRequest'
      ui:
        $ref: '#/definitions/AppUISettings'
  CreateAppResponse:
    type: object
    description: A response object containing the newly created App and OAuth client
      details.
    properties:
      app:
        $ref: '#/definitions/App'
      oauthClientId:
        type: string
        format: uuid
        description: The OAuth Client ID.
      oauthClientSecret:
        type: string
        format: uuid
        description: The OAuth Client Secret.
    example:
      app:
        appName: security-home-monitor
        appId: c71b0a5b-7dab-41fe-b75f-7cf30246468e
        appType: WEBHOOK_SMART_APP
        displayName: Security Home Monitor
        description: |
          An intergration that leverages all security devices in your home - cameras, motion sensors, etc to provide
          you with peace of mind and #security.
        owner:
          ownerType: USER
          ownerId: 3f178632-79ed-4358-94de-280dbd7c206c
        webhookSmartApp:
          targetUrl: https://securityhome.com/smartthings
          publicKey: |
            -----BEGIN PUBLIC KEY-----
            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlz00iTNPXIo+RM8n0Eudnh84XDWBFAkR
            L7mkOtXvZiKViCR1qs5LT3SaNy62hkUroexCoii4vjRTSHaQ9FwyBRo98EY9U3qzWmr9Row9ONcQ
            VKFVX6qiwb9SZG7QvHSfqVAuWhMGb1fFGUWl94L7kY0CihF+WJS5fdhXc1h/f/tY1439hruL3+BR
            /idfYjAKDa1+euW4b0HKMi4BdJutL/G5FXjDP7MP5fTRuM52erKpON1pwPD8ow/03MhK4wRikHqS
            /Kvd3UnQ8Q7OSrfJevqR0CqBf83Am1HSHh/bqOfsG0epl+2I1RKLBzB2tSTvMfk0ftiRSq/fRrhl
            xsJmFQIDAQAB
            -----END PUBLIC KEY-----
        createdDate: 2017-05-19T12:39:37Z
        lastUpdatedDate: 2017-05-19T12:39:37Z
      oauthClientId: 7cd4d474-7b36-4e03-bbdb-4cd4ae45a2be
      oauthClientSecret: 9b3fd445-42d6-441b-b386-99ea51e13cb0
  CreateOrUpdateLambdaSmartAppRequest:
    description: |
      Details related to a Lambda Smart App implementation.  This model should only be specified for apps of type LAMBDA_SMART_APP.
    type: object
    required:
    - functions
    properties:
      functions:
        description: A list of AWS arns referencing a Lambda function.
        type: array
        items:
          type: string
    example:
      functions:
      - arn:aws:lambda:eu-central-1:account-id:function:function-name:alias-name
      - arn:aws:lambda:ap-southeast-1:account-id:function:function-name:alias-name
  CreateOrUpdateWebhookSmartAppRequest:
    required:
    - targetUrl
    description: |
      Details related to a Webhook Smart App implementation.  This model should only be specified for apps of type WEBHOOK_SMART_APP.
    type: object
    properties:
      targetUrl:
        type: string
        description: A URL that should be invoked during execution.
    example:
      targetUrl: https://securityhome.com/smartthings
  UpdateAppOAuthRequest:
    required:
    - clientName
    - scope
    - redirectUris
    type: object
    properties:
      clientName:
        description: A name given to the OAuth Client.
        type: string
      scope:
        description: A list of SmartThings API OAuth scope identifiers that maybe
          required to execute your integration.
        type: array
        items:
          type: string
      redirectUris:
        description: A list of redirect URIs.
        type: array
        items:
          type: string
          format: uri
        minItems: 0
        maxItems: 10
    example:
      clientName: My SmartThings Integration
      scope:
      - r:installedapps
      - w:installedapps
  GenerateAppOAuthRequest:
    type: object
    properties:
      clientName:
        description: A name given to the OAuth Client.
        type: string
      scope:
        description: A list of SmartThings API OAuth scope identifiers that maybe
          required to execute your integration.
        type: array
        items:
          type: string
    example:
      clientName: My SmartThings Integration
      scope:
      - r:installedapps
      - w:installedapps
  DeleteAppResponse:
    description: An empty object 200 response.
    type: object
  UpdateAppSettingsRequest:
    type: object
    description: Settings for a given app
    properties:
      settings:
        type: object
        additionalProperties:
          type: string
    example:
      settings:
        mySecretData: 6c21f9ee-7634-413f-89f7-bdfdce88bf0e
  UpdateAppSettingsResponse:
    type: object
    description: Settings for a given app
    properties:
      settings:
        type: object
        additionalProperties:
          type: string
    example:
      settings:
        mySecretData: 6c21f9ee-7634-413f-89f7-bdfdce88bf0e
  UpdateSignatureTypeRequest:
    description: A request object used to switch the signing mechanism for authorizing
      SmartApp callbacks.
    type: object
    properties:
      signatureType:
        $ref: '#/definitions/SignatureType'
    example:
      signatureType: ST_PADLOCK
  UpdateSignatureTypeResponse:
    description: An empty object response.
    type: object
    example: {
      }
  GetAppSettingsResponse:
    type: object
    description: Settings for a given app
    properties:
      settings:
        type: object
        additionalProperties:
          type: string
    example:
      settings:
        mySecretData: 6c21f9ee-7634-413f-89f7-bdfdce88bf0e
  GenerateAppOAuthResponse:
    type: object
    description: A response object containing a new OAuth Client and it's details.
    properties:
      oauthClientDetails:
        $ref: '#/definitions/AppOAuth'
      oauthClientId:
        type: string
        format: uuid
        description: The OAuth Client ID.
      oauthClientSecret:
        type: string
        format: uuid
        description: The OAuth Client Secret.
    example:
      oauthClientDetails:
        clientName: My SmartThings Integration
        scope:
        - r:installedapps
        - w:installedapps
        - x:installedapps
      oauthClientId: 7cd4d474-7b36-4e03-bbdb-4cd4ae45a2be
      oauthClientSecret: 9b3fd445-42d6-441b-b386-99ea51e13cb0
  SignatureType:
    description: |
      The http signature type used for authorizing event delivery. APP_RSA generates an RSA key pair that will be used
      to verify requests from SmartThings. ST_PADLOCK requires verifcation through SmartThings public certificate.
    type: string
    enum:
    - APP_RSA
    - ST_PADLOCK
  PrincipalType:
    type: string
    enum:
    - LOCATION
    - USER_LEVEL
    description: Denotes the principal type to be used with the app.  Default is LOCATION.
  AppUISettings:
    type: object
    description: |
      A collection of settings to drive user interface in SmartThings clients.  Currently, only applicable for
      LAMBDA_SMART_APP and WEBHOOK_SMART_APP app types.
    properties:
      pluginId:
        type: string
        format: ^[a-zA-Z._]{1,99}$
      pluginUri:
        type: string
        format: uri
      dashboardCardsEnabled:
        type: boolean
      preInstallDashboardCardsEnabled:
        type: boolean
    required:
    - dashboardCardsEnabled
    - preInstallDashboardCardsEnabled
  AppTargetStatus:
    description: The registration status of a target url.
    type: string
    enum:
    - PENDING
    - CONFIRMED
  AdhocMessage:
    type: object
    description: |
      An adhoc message contains a list of message templates representing the same message in different locales. The
      system will serve the template with the locale that best matches the Recipient's language preferences. If the
      user's language preferences do not correlate to any message templates, the template defined by the
      `fallbackLocale` will be used. Variables from the template matching the locale of the Message will be assigned
      first, then `defaultVariables`.
    required:
    - fallbackLocale
    - templates
    properties:
      fallbackLocale:
        $ref: '#/definitions/LocaleTag'
      defaultVariables:
        description: |
          A map<string,string> with the key representing the variable name, and the value representing the verbiage
          to be replaced in template string. `defaultVariables` will only be used if there are no matching locale-level
          (template) variables for that key.
        type: object
        additionalProperties:
          type: string
      templates:
        type: array
        minItems: 1
        maxItems: 35
        items:
          $ref: '#/definitions/AdhocMessageTemplate'
        description: A list of templates representing the same message in different
          languages.
    example:
      fallbackLocale: en
      defaultVariables:
        duration: '5'
      templates:
      - localeTag: en
        template: '{{ deviceName }} will turn off in {{ duration }} minutes.'
        variables:
          deviceName: lamp
      - localeTag: es
        template: '{{ deviceName }} se apagará en {{ duration }} minutos.'
        variables:
          deviceName: lámpara
  AdhocMessageTemplate:
    description: A message template definition, representing a message in a specific
      locale and it's variables.
    type: object
    required:
    - localeTag
    - template
    properties:
      localeTag:
        $ref: '#/definitions/LocaleTag'
      variables:
        description: |
          A map<string,string> with the key representing the variable name, and the value representing the verbiage
          to be replaced in template string.
        type: object
        additionalProperties:
          type: string
      template:
        type: string
        description: |
          A message template string.  Specify variables using the double curly braces convention.
          i.e. "Hello, {{ firstName }}!"
    example:
      localeTag: en
      template: Hello, {{ firstName }}!
      variables:
        firstName: Jason
  LocaleVariables:
    description: Message template variables associated with a certain locale.
    type: object
    required:
    - localeTag
    properties:
      localeTag:
        $ref: '#/definitions/LocaleTag'
      variables:
        description: |
          A map<string,string> with the key representing the variable name, and the value representing the verbiage
          to be replaced in template string.
        type: object
        additionalProperties:
          type: string
  Message:
    description: |
      A Message contains a list of message templates representing the same message in different locales. The system will
      serve the template with the locale that best matches the Recipient's language preferences. If the user's language
      preferences do not correlate to any message templates, the template defined by the `fallbackLocale` will be used.
    type: object
    required:
    - fallbackLocale
    - templates
    properties:
      fallbackLocale:
        $ref: '#/definitions/LocaleTag'
      templates:
        type: array
        minItems: 1
        maxItems: 35
        items:
          $ref: '#/definitions/MessageTemplate'
        description: A list of templates representing the same message in different
          languages.
    example:
      fallbackLocale: en
      templates:
      - localeTag: en
        template: '{{ deviceName }} will turn off in {{ duration }} minutes.'
      - localeTag: es
        template: '{{ deviceName }} se apagará en {{ duration }} minutos.'
  MessageTemplate:
    description: A message template definition, representing a message in a specific
      locale.
    type: object
    required:
    - localeTag
    - template
    properties:
      localeTag:
        $ref: '#/definitions/LocaleTag'
      template:
        type: string
        description: |
          A message template string. Specify variables using the double curly braces convention.
          i.e. "Hello, {{ firstName }}!"
    example:
      localeTag: en
      template: Hello, {{ firstName }}!
  MessageType:
    type: string
    description: The expected message format to be sent.
    default: PREDEFINED
    enum:
    - PREDEFINED
    - ADHOC
  PagedMessageTemplate:
    type: object
    description: A simplified Message model which is retured during a list operation.
    required:
    - appId
    - messageTemplateKey
    properties:
      appId:
        type: string
        format: uuid
        description: A globally unique identifier for an app.
      messageTemplateKey:
        type: string
        format: ^[a-z0-9._]{1,36}$
    example:
      appId: 9cb655e0-bc31-4b94-9254-c4e2d0c35224
      messageTemplateKey: motion_detected_message
  PredefinedMessage:
    type: object
    description: |
      Predefined message options. Variables from `localeVariables` matching the locale of the Message will be assigned
      first, then `defaultVariables`.
    required:
    - messageTemplateKey
    properties:
      messageTemplateKey:
        type: string
        format: ^[a-z0-9._]{1,36}$
      defaultVariables:
        description: |
          A map<string,string> with the key representing the variable name, and the value representing the verbiage
          to be replaced in template string. `defaultVariables` are only used when there are no matching
          `localeVariables`.
        type: object
        additionalProperties:
          type: string
      localeVariables:
        description: |
          Variables to resolve for specific locales.
        type: array
        items:
          $ref: '#/definitions/LocaleVariables'
    example:
      messageTemplateKey: lamp_shutoff_message
      defaultVariables:
        duration: '5'
      localeVariables:
      - localeTag: en
        variables:
          deviceName: lamp
      - localeTag: es
        variables:
          deviceName: lámpara
  RuleRequest:
    type: object
    required:
    - name
    - actions
    properties:
      name:
        description: Name for the rule
        type: string
      actions:
        type: array
        items:
          $ref: '#/definitions/Action'
      timeZoneId:
        description: Time zone ID for this rule. This overrides the location time
          zone ID, but is overridden by time zone ID provided by each operand individually
        type: string
  Rule:
    allOf:
    - $ref: '#/definitions/RuleRequest'
    - type: object
      required:
      - id
      properties:
        id:
          description: Unique id for the rule
          type: string
          format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  Action:
    type: object
    properties:
      if:
        $ref: '#/definitions/IfAction'
      sleep:
        $ref: '#/definitions/SleepAction'
      command:
        $ref: '#/definitions/CommandAction'
      every:
        $ref: '#/definitions/EveryAction'
      location:
        $ref: '#/definitions/LocationAction'
  IfAction:
    allOf:
    - $ref: '#/definitions/Condition'
    - type: object
      properties:
        id:
          description: Unique id for the action
          type: string
          format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        then:
          type: array
          items:
            $ref: '#/definitions/Action'
        else:
          type: array
          items:
            $ref: '#/definitions/Action'
  CommandAction:
    type: object
    properties:
      id:
        description: Unique id for the action
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      devices:
        type: array
        items:
          type: string
          format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      commands:
        type: array
        items:
          $ref: '#/definitions/DeviceCommand'
    required:
    - devices
    - commands
  SleepAction:
    type: object
    properties:
      id:
        description: Unique id for the action
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      duration:
        $ref: '#/definitions/Interval'
    required:
    - duration
  EveryAction:
    type: object
    properties:
      id:
        description: Unique id for the action
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      interval:
        $ref: '#/definitions/Interval'
      specific:
        $ref: '#/definitions/TimeOperand'
      actions:
        type: array
        items:
          $ref: '#/definitions/Action'
    required:
    - actions
  LocationAction:
    type: object
    properties:
      id:
        description: Unique id for the action
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      mode:
        type: string
  Condition:
    type: object
    properties:
      and:
        type: array
        items:
          $ref: '#/definitions/Condition'
      or:
        type: array
        items:
          $ref: '#/definitions/Condition'
      not:
        $ref: '#/definitions/Condition'
      equals:
        $ref: '#/definitions/EqualsCondition'
      greater_than:
        $ref: '#/definitions/GreaterThanCondition'
      greater_than_or_equals:
        $ref: '#/definitions/GreaterThanOrEqualsCondition'
      less_than:
        $ref: '#/definitions/LessThanCondition'
      less_than_or_equals:
        $ref: '#/definitions/LessThanOrEqualsCondition'
      between:
        $ref: '#/definitions/BetweenCondition'
  SimpleCondition:
    type: object
    properties:
      id:
        description: Unique id for the condition
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      left:
        $ref: '#/definitions/Operand'
      right:
        $ref: '#/definitions/Operand'
      aggregation:
        $ref: '#/definitions/ConditionAggregationMode'
    required:
    - left
    - right
  EqualsCondition:
    allOf:
    - $ref: '#/definitions/SimpleCondition'
  GreaterThanCondition:
    allOf:
    - $ref: '#/definitions/SimpleCondition'
  GreaterThanOrEqualsCondition:
    allOf:
    - $ref: '#/definitions/SimpleCondition'
  LessThanCondition:
    allOf:
    - $ref: '#/definitions/SimpleCondition'
  LessThanOrEqualsCondition:
    allOf:
    - $ref: '#/definitions/SimpleCondition'
  BetweenCondition:
    type: object
    properties:
      id:
        description: Unique id for the condition
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      value:
        $ref: '#/definitions/Operand'
      start:
        $ref: '#/definitions/Operand'
      end:
        $ref: '#/definitions/Operand'
      aggregation:
        $ref: '#/definitions/ConditionAggregationMode'
    required:
    - value
    - start
    - end
  Operand:
    type: object
    properties:
      boolean:
        type: boolean
      decimal:
        type: number
        format: double
      integer:
        type: integer
        format: int64
      string:
        type: string
      array:
        $ref: '#/definitions/ArrayOperand'
      map:
        $ref: '#/definitions/MapOperand'
      device:
        $ref: '#/definitions/DeviceOperand'
      location:
        $ref: '#/definitions/LocationOperand'
      date:
        $ref: '#/definitions/DateOperand'
      time:
        $ref: '#/definitions/TimeOperand'
      datetime:
        $ref: '#/definitions/DateTimeOperand'
  ArrayOperand:
    type: object
    properties:
      operands:
        type: array
        items:
          $ref: '#/definitions/Operand'
      aggregation:
        $ref: '#/definitions/OperandAggregationMode'
    required:
    - operands
  DateOperand:
    type: object
    properties:
      timeZoneId:
        description: A java time zone ID reference
        type: string
      daysOfWeek:
        type: array
        items:
          $ref: '#/definitions/DayOfWeek'
      year:
        type: integer
        format: int32
      month:
        type: integer
        format: int32
        minimum: 1
        maximum: 12
      day:
        type: integer
        format: int32
        minimum: 1
        maximum: 31
      reference:
        $ref: '#/definitions/DateReference'
  DateTimeOperand:
    type: object
    properties:
      timeZoneId:
        description: A java time zone ID reference
        type: string
      daysOfWeek:
        type: array
        items:
          $ref: '#/definitions/DayOfWeek'
      year:
        type: integer
        format: int32
      month:
        type: integer
        format: int32
        minimum: 1
        maximum: 12
      day:
        type: integer
        format: int32
        minimum: 1
        maximum: 31
      reference:
        $ref: '#/definitions/TimeReference'
        default: Midnight
      offset:
        $ref: '#/definitions/Interval'
    required:
    - reference
  DeviceOperand:
    type: object
    properties:
      devices:
        type: array
        items:
          type: string
          format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      component:
        type: string
      capability:
        type: string
      attribute:
        type: string
      aggregation:
        $ref: '#/definitions/OperandAggregationMode'
    required:
    - devices
    - component
    - capability
    - attribute
  LocationOperand:
    type: object
    properties:
      attribute:
        $ref: '#/definitions/LocationAttribute'
    required:
    - attribute
  MapOperand:
    type: object
    additionalProperties:
      $ref: '#/definitions/Operand'
  TimeOperand:
    type: object
    properties:
      timeZoneId:
        description: A java time zone ID reference
        type: string
      daysOfWeek:
        type: array
        items:
          $ref: '#/definitions/DayOfWeek'
      reference:
        $ref: '#/definitions/TimeReference'
        default: Midnight
      offset:
        $ref: '#/definitions/Interval'
    required:
    - reference
  ExecutionResult:
    type: string
    enum:
    - Success
    - Failure
  ActionExecutionResult:
    description: The result of an action execution
    required:
    - actionId
    - result
    properties:
      actionId:
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      deviceId:
        description: Optional device ID for device actions
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      result:
        $ref: '#/definitions/ExecutionResult'
  RuleExecutionResponse:
    description: The result of a Rule execution
    required:
    - executionId
    - behaviorId
    - result
    properties:
      executionId:
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      behaviorId:
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      result:
        $ref: '#/definitions/ExecutionResult'
      actions:
        type: array
        items:
          $ref: '#/definitions/ActionExecutionResult'
  LocationAttribute:
    type: string
    enum:
    - Mode
    - ArmState
  DayOfWeek:
    type: string
    enum:
    - Sun
    - Mon
    - Tue
    - Wed
    - Thu
    - Fri
    - Sat
  DateReference:
    type: string
    enum:
    - Today
  TimeReference:
    type: string
    enum:
    - Now
    - Midnight
    - Sunrise
    - Noon
    - Sunset
  IntervalUnit:
    type: string
    enum:
    - Second
    - Minute
    - Hour
    - Day
    - Week
    - Month
    - Year
  Interval:
    type: object
    properties:
      value:
        $ref: '#/definitions/Operand'
      unit:
        $ref: '#/definitions/IntervalUnit'
    required:
    - value
    - unit
  OperandAggregationMode:
    type: string
    enum:
    - None
    default: None
  ConditionAggregationMode:
    type: string
    enum:
    - Any
    - All
    default: Any
  PagedRules:
    description: An array of Rules
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Rule'
      _links:
        $ref: '#/definitions/Links'
  SceneSummary:
    type: object
    properties:
      sceneId:
        type: string
        description: The unique identifier of the Scene
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      sceneName:
        type: string
        description: The user-defined name of the Scene
      sceneIcon:
        type: string
        description: The name of the icon
      sceneColor:
        type: string
        description: The color of the icon
      locationId:
        type: string
        description: Location of the Scene
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      createdBy:
        type: string
        description: The unique identifier of the user that created the scene
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      createdDate:
        type: string
        description: The date the scene was created
        format: date-time
      lastUpdatedDate:
        type: string
        description: The date the scene was last updated
        format: date-time
      lastExecutedDate:
        type: string
        description: The date the scene was last executed
        format: date-time
      editable:
        type: boolean
        description: Whether or not this scene can be edited by the logged in user
          using the version of the app that made the request
      apiVersion:
        type: string
  SceneDevice:
    type: object
    properties:
      deviceId:
        type: string
        description: the id of the device
      deviceLabel:
        type: string
        description: the label of the device
      deviceName:
        type: string
        description: the name of the device
      deviceTypeId:
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
        description: The identifier for the device's DeviceType.
      components:
        type: array
        items:
          $ref: '#/definitions/SceneComponent'
      locationId:
        type: string
        description: Location of the device
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
  SceneDeviceGroup:
    type: object
    properties:
      deviceGroupId:
        type: string
        description: the id of the device
      capability:
        $ref: '#/definitions/SceneCapability'
  SceneMode:
    type: object
    description: The mode activated by the Scene
    properties:
      modeId:
        type: string
        description: the id of the mode
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      modeName:
        type: string
        description: the name of the mode
  SceneRequest:
    type: object
    description: JSON body for creating or updating a Scene
    required:
    - sceneName
    - devices
    properties:
      sceneName:
        type: string
        description: The user-defined name of the Scene
      sceneIcon:
        type: string
        description: The name of the icon
      sceneColor:
        type: string
        description: The color of the icon
        format: ^\#[0-9A-F]{6}$
      devices:
        type: array
        description: Non-sequential list of device actions
        items:
          $ref: '#/definitions/SceneDeviceRequest'
      sequences:
        type: array
        description: List of parallel action sequences
        items:
          $ref: '#/definitions/SceneActionSequence'
      mode:
        $ref: '#/definitions/SceneModeRequest'
      securityMode:
        $ref: '#/definitions/SceneSecurityModeRequest'
      devicegroups:
        type: array
        description: List of device group actions
        items:
          $ref: '#/definitions/SceneDeviceGroupRequest'
  SceneActionSequence:
    type: array
    items:
      $ref: '#/definitions/SceneAction'
  SceneAction:
    type: object
    description: Possible scene actions, mutually exclusive
    properties:
      deviceRequest:
        $ref: '#/definitions/SceneDeviceRequest'
      modeRequest:
        $ref: '#/definitions/SceneModeRequest'
      sleepRequest:
        $ref: '#/definitions/SceneSleepRequest'
      deviceGroupRequest:
        $ref: '#/definitions/SceneDeviceGroupRequest'
  SceneDeviceRequest:
    type: object
    description: JSON structure for a device when creating a Scene
    properties:
      deviceId:
        type: string
        description: the id of the device
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      actionId:
        type: string
        description: the id of the action to be created. Optional, sent by Reaver
          only
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      components:
        type: array
        items:
          $ref: '#/definitions/SceneComponent'
  SceneDeviceGroupRequest:
    type: object
    description: JSON structure for a device group when creating a Scene
    required:
    - deviceGroupId
    properties:
      deviceGroupId:
        type: string
        description: the id of the device group
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      actionId:
        type: string
        description: the id of the action to be created. Optional, sent by Reaver
          only
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      capability:
        $ref: '#/definitions/SceneCapability'
  SceneModeRequest:
    type: object
    description: The mode to be activated by the Scene
    required:
    - modeId
    properties:
      modeId:
        type: string
        description: The id of the mode
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      actionId:
        type: string
        description: the id of the action to be created. Optional, sent by Reaver
          only
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      modeName:
        type: string
        description: The name of the mode
  SceneSecurityModeRequest:
    type: object
    description: The security mode to be activated by the Scene
    required:
    - security
    properties:
      actionId:
        type: string
        description: the id of the action to be created. Optional, sent by Reaver
          only
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      security:
        type: string
        description: The id of the security mode
        enum:
        - setArmStay
        - setArmAway
        - disarm
      arguments:
        type: string
        description: Additional query param
  SceneSleepRequest:
    type: object
    description: Sleep a particular sequence
    required:
    - seconds
    properties:
      seconds:
        type: integer
        description: Number of seconds to sleep the sequence
  SceneComponent:
    type: object
    description: A component of the scene device
    properties:
      componentId:
        type: string
        description: the id of the component
      capabilities:
        type: array
        items:
          $ref: '#/definitions/SceneCapability'
  SceneCapability:
    type: object
    description: A device component capability
    properties:
      capabilityId:
        type: string
        description: The id of the capability
      status:
        type: string
        description: The status of the capability
        enum:
        - proposed
        - live
        - deprecated
        - dead
      commands:
        description: Capability commands
        type: object
        additionalProperties:
          $ref: '#/definitions/SceneCommand'
  SceneCommand:
    type: object
    description: A component capability command
    properties:
      arguments:
        description: the command arguments
        type: array
        items:
          $ref: '#/definitions/SceneArgument'
  SceneArgument:
    type: object
    description: A capability command argument
    properties:
      name:
        type: string
        description: the name of the command
      schema:
        type: object
        description: the schema of the command
      value:
        type: object
        description: The value being set for the capability command
  ScenePagedResult:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/SceneSummary'
      _links:
        $ref: '#/definitions/Links'
  StandardSuccessResponse:
    description: '{"status": "success"}'
    type: object
    properties:
      status:
        type: string
        default: success
        enum:
        - success
  PagedCapabilities:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/CapabilitySummary'
      _links:
        $ref: '#/definitions/Links'
  CapabilitySummary:
    type: object
    properties:
      id:
        description: A URL safe unique identifier for the capability.
        type: string
        example: switch
      version:
        description: The version number of the capability.
        type: integer
        default: 1
        example: 1
      status:
        description: |
          The status of the capability.
          * __proposed__ - The capability is under a review and refinement process. The capability definition may go through changes, some of which may be breaking.
          * __live__ - The capability has been through review and the definition has been solidified. Live capabilities can no longer be altered.
          * __deprecated__ - The capability is marked for removal and should only be used during a period of migration to allow for existing integrations and automations to continue to work.
          * __dead__ - The usage of a deprecated capability has dropped to a sufficiently low level to warrant removal. The capability definition still exists but can no longer be used by automations or implemented by devices.
        type: string
        enum:
        - proposed
        - live
        - deprecated
        - dead
  Capability:
    type: object
    properties:
      id:
        description: A URL safe unique identifier for the capability.
        type: string
        example: namespace.colorTemperature
      version:
        description: The version number of the capability.
        type: integer
        default: 1
        example: 1
      status:
        description: |
          The status of the capability.
          * __proposed__ - The capability is currently under development / in review.  The capability definition may go through changes, some of which may currently not function properly.
          * __live__ - The capability has been through review and the definition has been codified.  Once a definition transitions from proposed to live, it cannot be altered.
          * __deprecated__ - The capability is marked for removal in future versions.  It should only be used during a short period of time to allow for existing integrations and automations to continue to work while the transition to a newer definition is made.
          * __dead__ - A previously deprecated definition is now ready for removal.  Usage of the deprecated definition had dropped to a sufficiently low enough level to warrant removal.  The dead definition still exists but it can no longer be used or implemented by devices.
        type: string
        enum:
        - proposed
        - live
        - deprecated
        - dead
      name:
        description: An alphanumeric English language name for the capability.
        type: string
        example: Color Temperature
      attributes:
        description: A mapping of attribute names to their definitions. All attribute
          names are lower camelcase.
        type: object
        additionalProperties:
          $ref: '#/definitions/CapabilityAttribute'
        example:
          colorTemperature:
            schema:
              type: object
              properties:
                value:
                  type: integer
                  minimum: 1
                  maximum: 30000
                unit:
                  type: string
                  enum:
                  - K
                  default: K
            required:
            - value
      commands:
        description: A mapping of command names to their definitions. All command
          names are lower camelcase.
        type: object
        additionalProperties:
          $ref: '#/definitions/CapabilityCommand'
        example:
          setColorTemperature:
            arguments:
            - name: temperature
              schema:
                type: integer
                minimum: 1
                maximum: 30000
  CapabilityAttribute:
    type: object
    properties:
      schema:
        description: ''
        $ref: '#/definitions/AttributeSchema'
      setter:
        type: string
        description: The name of the command that sets this attribute
        example: setColor
      enumCommands:
        type: array
        description: a list of objects that specify which commands set this attribute
        example:
        - command: 'on'
          value: 'on'
        - command: 'off'
          value: 'off'
        items:
          type: object
          properties:
            command:
              type: string
              description: the command that sets this attribute to the associated
                value
              example: null
            value:
              type: string
              description: the value that this command will set the attribute to
          required:
          - command
          - value
  AttributeSchema:
    description: |
      [JSON schema](http://json-schema.org/specification-links.html#draft-4) for the attribute. The API implements JSON schema version 4. For more info regarding JSON schema, please read [Understanding JSON Schema](https://json-schema.org/understanding-json-schema/index.html).
    type: object
    properties:
      title:
        type: string
      type:
        type: string
        enum:
        - object
      properties:
        $ref: '#/definitions/AttributeProperties'
      additionalProperties:
        type: boolean
        enum:
        - false
      required:
        type: array
        items:
          type: string
          enum:
          - value
          - unit
          - data
    additionalProperties: false
    required:
    - properties
  AttributeProperties:
    type: object
    properties:
      value:
        type: object
        properties:
          type:
            type: string
          enum:
            type: array
            items:
              type: string
        additionalProperties:
          type: object
        example:
          type: number
          minimum: 0
          maximum: 20
      unit:
        type: object
        properties:
          type:
            type: string
            enum:
            - string
            default: string
          enum:
            type: array
            example:
            - mm
            - in
            items:
              type: string
          default:
            type: string
            example: mm
      data:
        type: object
        properties:
          type:
            type: string
            enum:
            - object
            default: object
          additionalProperties:
            type: boolean
            default: false
          required:
            type: array
            items:
              type: string
          properties:
            type: object
            example:
              val:
                type: string
        required:
        - type
    additionalProperties: false
    required:
    - value
  CapabilityCommand:
    type: object
    properties:
      name:
        description: The name of the command. Unique for the capability
        type: string
        pattern: ^[[a-z]*([A-Z][a-z]*)*]{1,36}$
        example: setTemperature
      arguments:
        description: An array of argument definitions. The arguments must be supplied
          in the order specified.
        type: array
        items:
          $ref: '#/definitions/Argument'
    required:
    - name
    - argument
  Argument:
    type: object
    properties:
      name:
        description: A name that is unique within the command. Used for i18n and named
          argument command execution.
        type: string
        pattern: ^[[a-z]*([A-Z][a-z]*)*]{1,36}$
      optional:
        description: |
          Whether or not the argument must be supplied.
          If the argument is at the end of the arguments array then it can be completely ignored.
          If the argument is followed by another argument `null` must be supplied.
        type: boolean
        default: false
      schema:
        description: |
          [JSON schema](http://json-schema.org/specification-links.html#draft-4) for the argument. The API implements JSON schema version 4. For more info regarding JSON schema, please read [Understanding JSON Schema](https://json-schema.org/understanding-json-schema/index.html).
        type: object
    additionalProperties: false
    required:
    - name
    - schema
  CreateCapabilityRequest:
    type: object
    properties:
      name:
        description: An alphanumeric English language name for the capability.
        type: string
        pattern: ^[a-zA-Z0-9][a-zA-Z0-9 ]{1,35}$
        example: Color Temperature
      attributes:
        description: A mapping of attribute names to their definitions. All attribute
          names are lower camelcase. Required if no commands are specified.
        type: object
        additionalProperties:
          $ref: '#/definitions/CapabilityAttribute'
        example:
          colorTemperature:
            schema:
              type: object
              properties:
                value:
                  type: integer
                  minimum: 1
                  maximum: 30000
                unit:
                  type: string
                  enum:
                  - K
                  default: K
              additionalProperties: false
            required:
            - value
      commands:
        description: A mapping of command names to their definitions. All command
          names are lower camelcase. Required if no attributes are specified.
        type: object
        additionalProperties:
          $ref: '#/definitions/CapabilityCommand'
        example:
          setColorTemperature:
            arguments:
            - name: temperature
              optional: false
              schema:
                type: integer
                minimum: 1
                maximum: 30000
    required:
    - name
  UpdateCapabilityRequest:
    type: object
    properties:
      attributes:
        description: A mapping of attribute names to their definitions. All attribute
          names are lower camelcase.
        type: object
        additionalProperties:
          $ref: '#/definitions/CapabilityAttribute'
        example:
          colorTemperature:
            schema:
              type: object
              properties:
                value:
                  type: integer
                  minimum: 1
                  maximum: 30000
                unit:
                  type: string
                  enum:
                  - K
                  default: K
              additionalProperties: false
            required:
            - value
      commands:
        description: A mapping of command names to their definitions. All command
          names are lower camelcase.
        type: object
        additionalProperties:
          $ref: '#/definitions/CapabilityCommand'
        example:
          setColorTemperature:
            arguments:
            - name: temperature
              optional: false
              schema:
                type: integer
                minimum: 1
                maximum: 30000
  DeleteNamespaceResponse:
    type: object
  Namespace:
    type: object
    properties:
      name:
        description: A URL safe globally unique namespace name (ascii letters and
          numbers only)
        type: string
        example: companyx
      ownerType:
        description: The type of owner of the namespace.
        type: string
        enum:
        - user
        - organization
        - system
      ownerId:
        description: id of the owner (user, or in the future, organization)
        type: string
        example: 0c0b935d-0616-4441-a0bf-da7aeec3dc0a
  CreateCapabilityPresentationRequest:
    allOf:
    - $ref: '#/definitions/capabilityPresentationForPUT'
    - type: object
      properties:
        id:
          type: string
        version:
          $ref: '#/definitions/version'
      required:
      - id
      - version
  DeviceActivity:
    type: object
    required:
    - component
    properties:
      deviceId:
        type: string
        description: Device ID
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      deviceName:
        type: string
        description: Device nick name
        example: TV
      locationId:
        type: string
        description: Location ID
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      locationName:
        type: string
        description: Location name
        example: Home
      time:
        type: string
        description: The IS0-8601 date time strings in UTC of the activity
        format: date-time
        example: 2017-12-18T22:14:52Z
      text:
        type: string
        description: Translated human readable string (localized)
        example: 'battery of Button is: 89%'
      component:
        type: string
        description: device component ID. Not nullable.
        example: main
      componentLabel:
        type: string
        description: device component label. Nullable.
        example: left button
      capability:
        type: string
        description: capability name
        example: battery
      attribute:
        type: string
        description: attribute name
        example: battery
      value:
        type: object
        description: attribute value
        example: 0
      unit:
        type: string
        example: '%'
      data:
        type: object
        additionalProperties:
          type: object
        example:
          method: manual
          codeId: 1234
          timeout: 2018-05-09T23:03:31+0000
      translatedAttributeName:
        type: string
        description: translated attribute name based on 'Accept-Language' requested
          in header
        example: 스위치
      translatedAttributeValue:
        type: string
        description: translated attribute value based on 'Accept-Language' requested
          in header
        example: 켜짐
  ServiceCapabilities:
    type: array
    description: capability name(s)
    items:
      type: string
      enum:
      - weather
      - airQuality
      - forecast
      - airQualityForecast
    example:
      capabilities:
      - weather
      - forecast
      - airQuality
      - airQualityForecast
  IsaResults:
    type: object
    properties:
      isaId:
        type: string
        description: isaId installed for the user
      appName:
        type: string
        description: Viper connector name given by partner eg Lifx (Connect)
      partnerName:
        type: string
        description: Parnter name eg Lifx Inc
      icon:
        type: string
        description: url of partner icon
      icon2x:
        type: string
        description: url of partner icon in 2x dimensions
      icon3x:
        type: string
        description: url of partner icon in 3x dimensions
      locationId:
        type: string
        description: location of the installed smart app
  EndpointApp:
    type: object
    properties:
      appName:
        type: string
        description: The name of the endpoint app
      partnerName:
        type: string
        description: The name of the partner/brand
      oAuthAuthorizationUrl:
        type: string
        description: oAuth authorization url of the partner
      lambdaArn:
        type: string
        description: lambda arn of the partner for US region (default)
      lambdaArnEU:
        type: string
        description: lambda arn of the partner for EU region
      lambdaArnAP:
        type: string
        description: lambda arn of the partner for AP region
      lambdaArnCN:
        type: string
        description: lambda arn of the partner for CN region
      icon:
        type: string
        description: url of partner icon
      icon2x:
        type: string
        description: url of partner icon in 2x dimensions
      icon3x:
        type: string
        description: url of partner icon in 3x dimensions
      endpointAppId:
        type: string
        description: Viper endpoint app id for the partner
      oAuthClientId:
        type: string
        description: Client id for the partner oAuth
      oAuthClientSecret:
        type: string
        description: Client secret for the partner oAuth
      oAuthTokenUrl:
        type: string
        description: oAuth token refresh url of the partner
      oAuthScope:
        type: string
        description: oAuth scope for the partner. Example "remote_control:all" for
          Lifx
      userId:
        type: string
        description: user id for the partner
      hostingType:
        type: string
        description: Possible values - "lambda" or "webhook"
      schemaType:
        type: string
        description: Possible values - "alexa-schema", "st-schema", "google-schema"
      webhookUrl:
        type: string
        description: webhook url for the partner
      certificationStatus:
        type: string
        description: Possible values - "", "cst", "wwst", "review"
      userEmail:
        type: string
        description: Email for the partner
  DeviceResults:
    type: object
    properties:
      deviceId:
        type: string
        description: deviceId created by DM
      name:
        type: string
        description: initial device name from the partner
  CommandArguments:
    type: string
    example: 30
  EventType:
    description: |
      The type of event passed to the app being executed. The type will be one of:
        * DEVICE_COMMANDS_EVENT - _Only applicable for cloud-to-cloud device integration apps._ An event as a result of a device command execution request.
        * DEVICE_EVENT - A device event as a result of a subscription the app created.
        * DEVICE_HEALTH_EVENT - A device health event as a result of a change in a device's health.
        * DEVICE_LIFECYCLE_EVENT - A device lifecycle event as the result of a life change to the device.
        * HUB_HEALTH_EVENT - A hub health event as a result of a change in a hub's health.
        * MODE_EVENT - A mode event is triggered when the location's mode is changed.
        * SCENE_LIFECYCLE_EVENT - A scene lifecycle event as a result of a life change to the scene.
        * SECURITY_ARM_STATE_EVENT - A security arm state event as a result of a change in the arm state of a security system.
        * TIMER_EVENT - An event as a result of a scheduled app execution.
        * WEATHER_EVENT - An event with weather information.
    type: string
    enum:
    - DEVICE_COMMANDS_EVENT
    - DEVICE_EVENT
    - DEVICE_HEALTH_EVENT
    - DEVICE_LIFECYCLE_EVENT
    - HUB_HEALTH_EVENT
    - MODE_EVENT
    - SCENE_LIFECYCLE_EVENT
    - SECURITY_ARM_STATE_EVENT
    - TIMER_EVENT
    - INSTALLED_APP_LIFECYCLE_EVENT
    - WEATHER_EVENT
  DeviceEvent:
    description: An event on a device that matched a subscription for this app.
    type: object
    properties:
      eventId:
        description: The ID of the event.
        type: string
        example: 736e3903-001c-4d40-b408-ff40d162a06b
      locationId:
        description: The ID of the location in which the event was triggered.
        type: string
        example: 499e28ba-b33b-49c9-a5a1-cce40e41f8a6
      deviceId:
        description: The ID of the device associated with the DEVICE_EVENT.
        type: string
        example: 6f5ea629-4c05-4a90-a244-cc129b0a80c3
      componentId:
        description: The name of the component on the device that the event is associated
          with.
        type: string
        example: main
      capability:
        description: The name of the capability associated with the DEVICE_EVENT.
        type: string
        example: motionSensor
      attribute:
        description: The name of the DEVICE_EVENT. This typically corresponds to an
          attribute name of the device-handler’s capabilities.
        type: string
        example: motion
      value:
        description: |
          The value of the event. The type of the value is dependent on the capability's attribute type.
        type: object
        example: active
      valueType:
        description: |
          The root level data type of the value field. The data types are representitive of standard JSON data types.
        type: string
        example: number
      stateChange:
        description: Whether or not the state of the device has changed as a result
          of the DEVICE_EVENT.
        type: boolean
      data:
        description: json map as defined by capability data schema
        type: object
      subscriptionName:
        description: The name of subscription that caused delivery.
        type: string
        example: motion_sensors
  ModeEvent:
    type: object
    properties:
      eventId:
        description: The id of the event.
        type: string
      locationId:
        description: The id of the location in which the event was triggered.
        type: string
      modeId:
        description: The ID of the mode associated with a MODE_EVENT.
        type: string
  TimerEvent:
    description: An event that is caused by a schedule for this app being fired.
    type: object
    properties:
      eventId:
        description: The ID of the event.
        type: string
      name:
        description: The name of the schedule that caused this event.
        type: string
        example: lights_off_timeout
      type:
        $ref: '#/definitions/TimerType'
      time:
        description: The IS0-8601 date time strings in UTC that this event was scheduled
          for.
        type: string
        format: date-time
        example: 2017-08-04T12:44:18Z
      expression:
        description: The CRON expression if the schedule was of type CRON.
        type: string
  DeviceCommandsEvent:
    description: An event that contains commands for devices that were created by
      this app.
    type: object
    properties:
      eventId:
        description: The id of the event.
        type: string
      deviceId:
        type: string
        description: The guid of the device that the commands are for.
      profileId:
        type: string
        description: The device profile ID of the device instance.
      externalId:
        type: string
        description: The external ID that was set during install of a device.
      commands:
        type: array
        items:
          $ref: '#/definitions/DeviceCommandsEventCommand'
  TimerType:
    description: The type of TIMER_EVENT.
    type: string
    enum:
    - CRON
    - ONCE
  DeviceCommandsEventCommand:
    type: object
    properties:
      componentId:
        type: string
        example: main
      capability:
        type: string
        example: switch
      command:
        type: string
        example: 'on'
      arguments:
        type: array
        items:
          type: object
        example: [
          ]
  DeviceLifecycleEvent:
    description: A device lifecycle event.
    type: object
    properties:
      lifecycle:
        $ref: '#/definitions/DeviceLifecycle'
      eventId:
        description: The id of the event.
        type: string
      locationId:
        description: The id of the location in which the event was triggered.
        type: string
      deviceId:
        description: The id of the device.
        type: string
      deviceName:
        description: The name of the device
        type: string
      principal:
        description: The principal that made the change
        type: string
      create:
        $ref: '#/definitions/DeviceLifecycleCreate'
      delete:
        $ref: '#/definitions/DeviceLifecycleDelete'
      update:
        $ref: '#/definitions/DeviceLifecycleUpdate'
      moveFrom:
        $ref: '#/definitions/DeviceLifecycleMove'
      moveTo:
        $ref: '#/definitions/DeviceLifecycleMove'
  SecurityArmStateEvent:
    description: |
      An event that represents a change in the arm state of a security system.
    type: object
    properties:
      eventId:
        description: The id of the event.
        type: string
      locationId:
        description: The id of the location in which the event was triggered.
        type: string
      armState:
        description: |
          The arm state of a security system.
        type: string
        enum:
        - UNKNOWN
        - ARMED_STAY
        - ARMED_AWAY
        - DISARMED
      optionalArguments:
        description: |
          A set of key / value pairs useful for passing any optional arguments.
        type: object
        additionalProperties:
          $ref: '#/definitions/SimpleValue'
  DeviceHealthEvent:
    description: An event that represents a change in the health of the a device.
    type: object
    properties:
      eventId:
        description: The id of the event.
        type: string
      locationId:
        description: The id of the location in which the event was triggered.
        type: string
      deviceId:
        description: The id of the device.
        type: string
      hubId:
        description: The id of the hub.
        type: string
      status:
        description: |
          The status of the device.
        type: string
        enum:
        - OFFLINE
        - ONLINE
        - UNHEALTHY
      reason:
        description: |
          The reason the device is offline.
        type: string
        enum:
        - NONE
        - SERVICE_UNAVAILABLE
        - HUB_OFFLINE
        - ZWAVE_OFFLINE
        - ZIGBEE_OFFLINE
        - BLUETOOTH_OFFLINE
        - HUB_DISCONNECTED
  HubHealthEvent:
    description: An event that represents a change in the health of a hub.
    type: object
    properties:
      eventId:
        description: The id of the event.
        type: string
      locationId:
        description: The id of the location in which the event was triggered.
        type: string
      hubId:
        description: The id of the hub.
        type: string
      status:
        description: |
          The status of the hub.
        type: string
        enum:
        - OFFLINE
        - ONLINE
        - ZWAVE_OFFLINE
        - ZWAVE_ONLINE
        - ZIGBEE_OFFLINE
        - ZIGBEE_ONLINE
        - BLUETOOTH_OFFLINE
        - BLUETOOTH_ONLINE
      reason:
        description: |
          The reason the hub is offline.
        type: string
        enum:
        - NONE
        - DISCONNECTED
        - INACTIVE
  SceneLifecycleEvent:
    description: A scene lifecycle event.
    type: object
    properties:
      lifecycle:
        $ref: '#/definitions/SceneLifecycle'
      eventId:
        description: The id of the event.
        type: string
      locationId:
        description: The id of the location in which the event was triggered.
        type: string
      sceneId:
        description: The id of the scene.
        type: string
      create:
        $ref: '#/definitions/SceneLifecycleCreate'
      update:
        $ref: '#/definitions/SceneLifecycleUpdate'
      delete:
        $ref: '#/definitions/SceneLifecycleDelete'
  DeviceLifecycle:
    description: |
      The device lifecycle. The lifecycle will be one of:
      * CREATE - Invoked when a device is created.
      * DELETE - Invoked when a device is deleted.
      * UPDATE - Invoked when a device is updated.
      * MOVE_FROM - Invoked when a device is moved from a location.
      * MOVE_TO - Invoked when a device is moved to a location.
    type: string
    enum:
    - CREATE
    - DELETE
    - UPDATE
    - MOVE_FROM
    - MOVE_TO
  DeviceLifecycleCreate:
    description: |
      Create device lifecycle.
    type: object
  DeviceLifecycleDelete:
    description: |
      Delete device lifecycle.
    type: object
  DeviceLifecycleUpdate:
    description: |
      Update device lifecycle.
    type: object
  DeviceLifecycleMove:
    description: |
      Move device lifecycle.
    type: object
    properties:
      locationId:
        type: string
  SimpleValue:
    description: A simple value.
    type: object
    properties:
      valueType:
        description: |
          The type of the value.
        type: string
        enum:
        - NULL_VALUE
        - INT_VALUE
        - DOUBLE_VALUE
        - STRING_VALUE
        - BOOLEAN_VALUE
      intValue:
        type: integer
      doubleValue:
        type: number
        format: double
      stringValue:
        type: string
      boolValue:
        type: boolean
  SceneLifecycle:
    description: |
      The scene lifecycle. The lifecycle will be one of:
      * CREATE - Invoked when a scene is created.
      * UPDATE - Invoked when a scene is updated.
      * DELETE - Invoked when a scene is deleted.
    type: string
    enum:
    - CREATE
    - UPDATE
    - DELETE
  SceneLifecycleCreate:
    description: |
      Create scene lifecycle.
    type: object
  SceneLifecycleUpdate:
    description: |
      Update scene lifecycle.
    type: object
  SceneLifecycleDelete:
    description: |
      Delete scene lifecycle.
    type: object
  InstalledAppLifecycleEvent:
    description: An Installed App Lifecycle Event.
    type: object
    properties:
      eventId:
        description: The id of the event.
        type: string
      locationId:
        description: The ID of the location in which the event was triggered.
        type: string
        example: 499e28ba-b33b-49c9-a5a1-cce40e41f8a6
      installedAppId:
        description: The ID of the installed application.
        type: string
        example: 6f5ea629-4c05-4a90-a244-cc129b0a80c3
      appId:
        description: The ID of the application.
        type: string
      lifecycle:
        $ref: '#/definitions/InstalledAppLifecycle'
      create:
        $ref: '#/definitions/InstalledAppLifecycleCreate'
      install:
        $ref: '#/definitions/InstalledAppLifecycleInstall'
      update:
        $ref: '#/definitions/InstalledAppLifecycleUpdate'
      delete:
        $ref: '#/definitions/InstalledAppLifecycleDelete'
      other:
        $ref: '#/definitions/InstalledAppLifecycleOther'
      error:
        $ref: '#/definitions/InstalledAppLifecycleError'
  InstalledAppLifecycle:
    description: |
      The installed app lifecycle. The lifecycle will be one of:
      * CREATE - Invoked when an application is created.
      * INSTALL - Invoked when an application is installed.
      * UPDATE - Invoked when an application is updated.
      * DELETE - Invoked when an application is deleted.
      * OTHER -
    type: string
    enum:
    - CREATE
    - INSTALL
    - UPDATE
    - DELETE
    - OTHER
  InstalledAppLifecycleCreate:
    description: |
      Create installed app lifecycle.
    type: object
  InstalledAppLifecycleUpdate:
    description: |
      Update installed app lifecycle.
    type: object
  InstalledAppLifecycleDelete:
    description: |
      Delete installed app lifecycle.
    type: object
  InstalledAppLifecycleInstall:
    description: |
      Install installed app lifecycle.
    type: object
  InstalledAppLifecycleOther:
    description: |
      Other installed app lifecycle.
    type: object
  InstalledAppLifecycleError:
    type: object
    properties:
      code:
        type: string
      message:
        type: string
      target:
        type: string
      details:
        type: array
        items:
          $ref: '#/definitions/InstalledAppLifecycleError'
  WeatherData:
    type: object
    description: |
      Weather data
    properties:
      cloudCeilingInM:
        description: Cloud ceiling in meters
        type: integer
      cloudCoverPhrase:
        description: The phrase of the cloud cover
        type: string
      relativeHumidityInPercent:
        description: Relative Humidity Percentage
        type: integer
      sunriseDate:
        type: string
      sunsetDate:
        type: string
      temperatureInC:
        description: Temperature in degrees celsius
        type: number
        format: double
      temperatureFeelsLikeInC:
        description: Feels-like temperature in degrees celsius
        type: number
        format: double
      uvDescription:
        type: string
      uvIndex:
        type: integer
      visibilityInKm:
        type: number
        format: double
      windDirectionInDegrees:
        type: integer
      windDirectionCardinal:
        type: string
      windGustInKmph:
        type: integer
      windSpeedInKmph:
        type: integer
      conditionPhraseLong:
        type: string
      conditionState:
        type: string
        enum:
        - UNKNOWN
        - CLEAR
        - SNOW
        - RAIN
  AirQualityData:
    type: object
    description: |
      Air quality data
    properties:
      airQualityIndex:
        type: integer
      o3AmountInUgm3:
        type: number
        format: double
      o3Index:
        type: integer
      no2AmountInUgm3:
        type: number
        format: double
      no2Index:
        type: integer
      so2AmountInUgm3:
        type: number
        format: double
      so2Index:
        type: integer
      coAmountInUgm3:
        type: number
        format: double
      coIndex:
        type: integer
      pm10AmountInUgm3:
        type: number
        format: double
      pm10Index:
        type: integer
      pm25AmountInUgm3:
        type: number
        format: double
      pm25Index:
        type: integer
  WeatherEvent:
    description: An event representing the current weather forecast.
    type: object
    properties:
      weatherData:
        $ref: '#/definitions/WeatherData'
      airQualityData:
        $ref: '#/definitions/AirQualityData'
  CreateDeviceConfigRequest:
    type: object
    properties:
      type:
        type: string
        enum:
        - dth
        - profile
        default: profile
      iconUrl:
        $ref: '#/definitions/iconUrl'
      dashboard:
        type: object
        properties:
          states:
            type: array
            items:
              $ref: '#/definitions/deviceConfigEntry'
          actions:
            type: array
            items:
              $ref: '#/definitions/deviceConfigEntry'
      detailView:
        type: array
        items:
          $ref: '#/definitions/deviceConfigEntry'
      automation:
        type: object
        properties:
          conditions:
            type: array
            items:
              $ref: '#/definitions/deviceConfigEntry'
          actions:
            type: array
            items:
              $ref: '#/definitions/deviceConfigEntry'
  deviceConfiguration:
    type: object
    properties:
      mnmn:
        $ref: '#/definitions/mnmn'
      vid:
        $ref: '#/definitions/vid'
      type:
        type: string
        enum:
        - dth
        - profile
        default: profile
      dpInfo:
        $ref: '#/definitions/dpInfo'
      iconUrl:
        $ref: '#/definitions/iconUrl'
      dashboard:
        type: object
        properties:
          states:
            type: array
            items:
              $ref: '#/definitions/deviceConfigEntry'
          actions:
            type: array
            items:
              $ref: '#/definitions/deviceConfigEntry'
      detailView:
        type: array
        items:
          $ref: '#/definitions/deviceConfigEntry'
      automation:
        type: object
        properties:
          conditions:
            type: array
            items:
              $ref: '#/definitions/deviceConfigEntry'
          actions:
            type: array
            items:
              $ref: '#/definitions/deviceConfigEntry'
    required:
    - mnmn
    - vid
  deviceConfigEntry:
    type: object
    properties:
      component:
        type: string
        example: main
      capability:
        type: string
        example: thermostatMode
      version:
        $ref: '#/definitions/version'
      values:
        description: A list of valid values for the command argument or attribute
          that can override those defined by the alternatives provided in the capability
          presentation.
        type: array
        items:
          $ref: '#/definitions/capabilityValue'
      visibleCondition:
        $ref: '#/definitions/visibleCondition'
    required:
    - component
    - capability
  capabilityValue:
    type: object
    properties:
      key:
        type: string
        description: This can be either command name or attribute name.
        example: thermostatMode.value
      enabledValues:
        type: array
        description: A list of values supported among those defined in the capability
          alternatives. For instance, a device may not support `auto` for supported
          thermostat fan modes, so this field might be an array containing `on` and
          `off`.
        items:
          type: string
        example:
        - cooling
        - heating
      range:
        $ref: '#/definitions/range'
      step:
        $ref: '#/definitions/step'
    required:
    - key
  devicePresentation:
    type: object
    properties:
      mnmn:
        $ref: '#/definitions/mnmn'
      vid:
        $ref: '#/definitions/vid'
      iconUrl:
        $ref: '#/definitions/iconUrl'
      dashboard:
        $ref: '#/definitions/dashboard'
      detailView:
        $ref: '#/definitions/detailView'
      automation:
        $ref: '#/definitions/automation'
      dpInfo:
        $ref: '#/definitions/dpInfo'
      language:
        $ref: '#/definitions/language'
    required:
    - mnmn
    - vid
    - dpInfo
  capabilityPresentationForPUT:
    type: object
    description: The capability presentation describes how the capability will look
      in the app, what actions and states are shown, as well as how conditions and
      actions are expressed in an automation.
    properties:
      dashboard:
        $ref: '#/definitions/dashboardForCapability'
      detailView:
        $ref: '#/definitions/detailViewForCapability'
      automation:
        $ref: '#/definitions/automationForCapability'
  capabilityPresentation:
    allOf:
    - type: object
      properties:
        id:
          type: string
          example: audioVolume
        version:
          $ref: '#/definitions/version'
          example: 1
    - $ref: '#/definitions/capabilityPresentationForPUT'
    required:
    - id
    - version
  language:
    type: array
    items:
      $ref: '#/definitions/languageItem'
  languageItem:
    type: object
    required:
    - locale
    - poCodes
    properties:
      locale:
        type: string
        description: ICU locale
      poCodes:
        type: array
        items:
          $ref: '#/definitions/poCodes'
        description: The list of resources that contain translated text
  poCodes:
    type: object
    required:
    - label
    - po
    properties:
      label:
        type: string
      po:
        type: string
        pattern: ^___PO_CODE_[a-zA-Z0-9_]+$
        description: Po code. Should begin with '___PO_CODE'
  dpInfo:
    type: array
    description: Information used for obtaining details page plugins on different
      platforms. Array of Details page link objects.
    items:
      type: object
      required:
      - os
      - dpType
      - dpUri
      properties:
        os:
          type: string
          description: 'The OS of the UI Client used to show the details page. ''iOS'':
            iOS SmartThings ''android'': Android SmartThings'
          enum:
          - android
          - ios
          - web
        dpUri:
          type: string
          description: This is linked to obtain the vendor-specific device details
            page. The device's dashboard card opens the detail view using this link
            when the user clicks the device card.
          example: plugin://example_detail_page_uri
        operatingMode:
          type: string
          enum:
          - easySetup
          - deviceControl
          description: This describes operating mode after onboarding. `easySetup`
            will launch the plugin for setting up your device while `deviceControl`
            will launch the plugin for controlling the device directly after onboarding.
  alternatives:
    type: array
    items:
      $ref: '#/definitions/alternativeItem'
    description: A collection of strings that can replace the attribute value in the
      `label` or `value`. Must be human-readable for the UI client to display.
  alternativeItem:
    type: object
    required:
    - key
    - value
    properties:
      key:
        type: string
        description: The attribute value which will cause this alternative string
          to be displayed. The attribute to be evaluated will be the one that is used
          in the `label` or `value`.
        example: 'on'
      value:
        type: string
        description: The label string to be displayed when the 'key' is evaluated.
        example: Motion detected
      type:
        type: string
        enum:
        - inactive
        - active
        default: active
        description: This shows the active or inactive state of the value. Active
          is shown in color, while inactive value is shown dimmed in the UI view.
          For example, Motion sensor capability would have `detected` as active and
          in color and `clear` as inactive and dimmed so that a user can see the `detected`
          event easily.
      description:
        type: string
        description: Additional description for each value. This description is shown
          in detail view or automation under this particular key.
  iconUrl:
    type: string
    description: Preloaded iconId or URL used to retrieve icons to be drawn on the
      UI Client.
    example: preload://example_icon_url
  step:
    type: number
    format: double
    default: 1.0
    description: The incremental step that increases or decreases for numeric values.
  range:
    type: array
    description: The inclusive range of a numeric value or bounds of a string depending
      on the data type it is applied to.
    items:
      type: number
      format: double
    maxItems: 2
    minItems: 2
    example:
    - 0
    - 100
  operator:
    type: string
    description: The method to compare
    enum:
    - CONTAINS
    - DOES_NOT_CONTAIN
    - EQUALS
    - DOES_NOT_EQUAL
    - GREATER_THAN
    - GREATER_THAN_OR_EQUALS
    - LESS_THAN
    - LESS_THAN_OR_EQUALS
  version:
    description: The version number of the capability.
    type: integer
    example: 1
    default: 1
  mnmn:
    type: string
    description: The name of the manufacturer
    example: SmartThingsCommunity
  vid:
    type: string
    description: A unique identifier for the presentation of a device. This can be
      a model number on legacy device integrations, but also may be a system generated
      UUID based on a device's structure and display configuration.
    example: MySmartDevice
  capabilityKey:
    type: object
    properties:
      capability:
        type: string
      version:
        $ref: '#/definitions/version'
    required:
    - capability
    example:
      capability: switch
      version: 1
  component:
    type: string
    example: main
  formattedLabel:
    type: string
    description: |
      This displays a string. This can be a formatted string with variables.
      Example: `{{attribute.value}} {{attribute.unit}}` (where `attribute` is the name of an attribute in your capability)
    example: '{{temperatureMeasurement.value}}'
  state:
    type: object
    properties:
      label:
        $ref: '#/definitions/formattedLabel'
      unit:
        allOf:
        - $ref: '#/definitions/unit'
        - description: Notation which indicates the unit of the label
      alternatives:
        allOf:
        - $ref: '#/definitions/alternatives'
        - description: A list of strings corresponding to each possible value of the
            label or unit.
  supportedValues:
    type: string
    description: The attribute name specified in supportedValues is an array that
      has values supported at runtime.
    pattern: (^[[a-z]*([A-Z][a-z]*)*){1,36}(\.value)+
  visibleCondition:
    allOf:
    - $ref: '#/definitions/capabilityKey'
    - type: object
      description: This resource is shown in the UI when the condition is met. If
        visibleCondition is omitted, it is always visible. visibleCondition object
        might reference a different component, capability and version.
      properties:
        component:
          $ref: '#/definitions/component'
          description: The component that controls the visibility of this component.
            This can be another component or this one.
        value:
          $ref: '#/definitions/value'
        operator:
          $ref: '#/definitions/operator'
        operand:
          type: string
          description: The value that the visible condition evaluates against.
      example:
        component: main
        value: switch.value
        operator: EQUALS
        operand: true
    required:
    - capability
    - value
    - operand
    - operator
  dashboard:
    type: object
    properties:
      states:
        type: array
        items:
          $ref: '#/definitions/statesArrayItem'
      actions:
        type: array
        items:
          $ref: '#/definitions/actionsArrayItem'
      basicPlus:
        type: array
        items:
          $ref: '#/definitions/basicPlusArrayItem'
  dashboardForCapability:
    type: object
    description: The dashboard is the main view in the SmartThings app that shows
      a list of devices and their state.
    properties:
      states:
        type: array
        items:
          type: object
          required:
          - label
          properties:
            label:
              allOf:
              - $ref: '#/definitions/formattedLabel'
              - example: 'Motion: {{humidity.value}}'
            alternatives:
              allOf:
              - $ref: '#/definitions/alternatives'
              - example:
                - key: detected
                  value: Detected
                  type: active
                - key: clear
                  value: Clear
                  type: inactive
            group:
              allOf:
              - $ref: '#/definitions/group'
              - example: main
      actions:
        type: array
        items:
          type: object
          properties:
            displayType:
              type: string
              description: Specify the type of UI component to use to display this
                action or state. The corresponding field must also be included. For
                example, if you specify "switch" here, you must also include the "switch"
                key and its object definition for this action or state.
              enum:
              - pushButton
              - toggleSwitch
              - switch
              - standbyPowerSwitch
              - playPause
              - playStop
            pushButton:
              $ref: '#/definitions/pushButton'
            toggleSwitch:
              $ref: '#/definitions/toggleSwitchForDashboard'
            switch:
              $ref: '#/definitions/switchForDashboard'
            standbyPowerSwitch:
              $ref: '#/definitions/standbyPowerSwitchForDashboard'
            playPause:
              $ref: '#/definitions/playPause'
            playStop:
              $ref: '#/definitions/playStop'
            group:
              $ref: '#/definitions/group'
          required:
          - displayType
      basicPlus:
        type: array
        items:
          $ref: '#/definitions/basicPlusItem'
  stateItem:
    allOf:
    - type: object
      required:
      - label
      properties:
        label:
          $ref: '#/definitions/formattedLabel'
        alternatives:
          $ref: '#/definitions/alternatives'
        group:
          $ref: '#/definitions/group'
      example:
        label: 'Motion: {{motion.value}}'
        alternatives:
        - key: detected
          value: Detected
          type: active
        - key: clear
          value: None
          type: inactive
        group: main
  actionItem:
    allOf:
    - type: object
      properties:
        displayType:
          type: string
          description: Specify the type of UI component to use to display this action
            or state. The corresponding field must also be included. For example,
            if you specify "switch" here, you must also include the "switch" key and
            its object definition for this action or state.
          enum:
          - pushButton
          - toggleSwitch
          - switch
          - standbyPowerSwitch
          - playPause
          - playStop
        pushButton:
          $ref: '#/definitions/pushButton'
        toggleSwitch:
          $ref: '#/definitions/toggleSwitchForDashboard'
        switch:
          $ref: '#/definitions/switchForDashboard'
        standbyPowerSwitch:
          $ref: '#/definitions/standbyPowerSwitchForDashboard'
        playPause:
          $ref: '#/definitions/playPause'
        playStop:
          $ref: '#/definitions/playStop'
        group:
          $ref: '#/definitions/group'
      required:
      - displayType
      example:
        displayType: switch
        switch:
          command:
            name: setLock
            'on': locked
            'off': unlocked
          state:
            value: lock.value
            'on': locked
            'off': unlocked
  basicPlusItem:
    type: object
    description: To specify the function of the device using the extended area of
      the dashboard card.
    properties:
      displayType:
        type: string
        description: Specify the type of UI component to use to display this action
          or state. The corresponding field must also be included. For example, if
          you specify "switch" here, you must also include the "switch" key and its
          object definition for this action or state.
        enum:
        - stepper
        - feature
      stepper:
        $ref: '#/definitions/stepper'
      feature:
        $ref: '#/definitions/feature'
      visibleCondition:
        $ref: '#/definitions/visibleCondition'
    required:
    - displayType
    example:
      displayType: stepper
      stepper:
        command:
          name: setVolume
        value: volume.value
        step: 1
        range:
        - 0
        - 100
      visibleCondition:
        component: main
        capability: switch
        version: 1
        value: switch.value
        operator: EQUALS
        operand: true
      component: main
  detailView:
    type: array
    items:
      $ref: '#/definitions/detailViewListItem'
  detailViewForCapability:
    type: array
    items:
      type: object
      properties:
        label:
          type: string
          example: Front door
        displayType:
          type: string
          description: Specify the type of UI component to use to display this action
            or state. The corresponding field must also be included. For example,
            if you specify "switch" here, you must also include the "switch" key and
            its object definition for this action or state.
          enum:
          - toggleSwitch
          - standbyPowerSwitch
          - switch
          - slider
          - pushButton
          - playPause
          - playStop
          - list
          - textField
          - numberField
          - stepper
          - state
        toggleSwitch:
          $ref: '#/definitions/toggleSwitch'
        standbyPowerSwitch:
          $ref: '#/definitions/standbyPowerSwitch'
        switch:
          $ref: '#/definitions/switch'
        slider:
          $ref: '#/definitions/slider'
        pushButton:
          $ref: '#/definitions/pushButton'
        playPause:
          $ref: '#/definitions/playPause'
        playStop:
          $ref: '#/definitions/playStop'
        list:
          $ref: '#/definitions/listForDetailView'
        textField:
          $ref: '#/definitions/textField'
        numberField:
          $ref: '#/definitions/numberField'
        stepper:
          $ref: '#/definitions/stepper'
        state:
          allOf:
          - $ref: '#/definitions/state'
          - description: This display type creates a state UI that shows state only.
      required:
      - label
      - displayType
  detailViewItem:
    allOf:
    - $ref: '#/definitions/capabilityKey'
    - type: object
      properties:
        label:
          type: string
        displayType:
          type: string
          description: Specify the type of UI component to use to display this action
            or state. The corresponding field must also be included. For example,
            if you specify "switch" here, you must also include the "switch" key and
            its object definition for this action or state.
          enum:
          - toggleSwitch
          - standbyPowerSwitch
          - switch
          - slider
          - pushButton
          - playPause
          - playStop
          - list
          - textField
          - numberField
          - stepper
          - state
          - multiArgCommand
        toggleSwitch:
          $ref: '#/definitions/toggleSwitch'
        standbyPowerSwitch:
          $ref: '#/definitions/standbyPowerSwitch'
        switch:
          $ref: '#/definitions/switch'
        slider:
          $ref: '#/definitions/slider'
        pushButton:
          $ref: '#/definitions/pushButton'
        playPause:
          $ref: '#/definitions/playPause'
        playStop:
          $ref: '#/definitions/playStop'
        list:
          $ref: '#/definitions/listForDetailView'
        textField:
          $ref: '#/definitions/textField'
        numberField:
          $ref: '#/definitions/numberField'
        stepper:
          $ref: '#/definitions/stepper'
        state:
          allOf:
          - $ref: '#/definitions/state'
          - description: This display type creates a state UI that shows state only.
        multiArgCommand:
          $ref: '#/definitions/multiArgCommand'
      required:
      - label
      - displayType
  automationForCapability:
    type: object
    description: |
      In the SmartThings app, you can build custom Automations to automatically trigger actions when certain condition regarding device state is met.
    properties:
      conditions:
        type: array
        description: To specify the conditions of device state to trigger actions
          in the automation view of SmartThings app.
        items:
          type: object
          properties:
            label:
              type: string
              example: Audio volume
            displayType:
              type: string
              description: Specify the type of UI component to use to display this
                action or state. The corresponding field must also be included. For
                example, if you specify "switch" here, you must also include the "switch"
                key and its object definition for this action or state.
              enum:
              - slider
              - list
              - numberField
              - textField
            slider:
              $ref: '#/definitions/sliderForAutomationCondition'
            list:
              $ref: '#/definitions/listForAutomationCondition'
            numberField:
              $ref: '#/definitions/numberFieldForAutomationCondition'
            textField:
              $ref: '#/definitions/textFieldForAutomationCondition'
            emphasis:
              type: boolean
              description: The effect used to emphasize this resource widget. The
                default value is false. If the emphasis value is true and this object
                has alternatives, a list will appear without a label
          required:
          - label
          - displayType
      actions:
        type: array
        description: To specify the actions of device control based on the device
          state in the automation view of SmartThings app.
        items:
          type: object
          properties:
            label:
              type: string
              example: Audio volume
            displayType:
              type: string
              description: Specify the type of UI component to use to display this
                action or state. The corresponding field must also be included. For
                example, if you specify "switch" here, you must also include the "switch"
                key and its object definition for this action or state.
              enum:
              - slider
              - list
              - numberField
              - textField
              - multiArgCommand
            slider:
              $ref: '#/definitions/sliderForAutomationAction'
            list:
              $ref: '#/definitions/listForAutomationAction'
            textField:
              $ref: '#/definitions/textFieldForAutomationAction'
            numberField:
              $ref: '#/definitions/numberFieldForAutomationAction'
            multiArgCommand:
              $ref: '#/definitions/multiArgCommand'
            emphasis:
              type: boolean
              description: The effect used to emphasize this resource widget. The
                default value is false. If the emphasis value is true and this object
                has alternatives, a list will appear without a label
          required:
          - label
          - displayType
  automationCondition:
    allOf:
    - $ref: '#/definitions/capabilityKey'
    - type: object
      properties:
        label:
          type: string
        displayType:
          type: string
          description: Specify the type of UI component to use to display this action
            or state. The corresponding field must also be included. For example,
            if you specify "switch" here, you must also include the "switch" key and
            its object definition for this action or state.
          enum:
          - slider
          - list
          - numberField
          - textField
        slider:
          $ref: '#/definitions/sliderForAutomationCondition'
        list:
          $ref: '#/definitions/listForAutomationCondition'
        numberField:
          $ref: '#/definitions/numberFieldForAutomationCondition'
        textField:
          $ref: '#/definitions/textFieldForAutomationCondition'
        emphasis:
          type: boolean
          description: The effect used to emphasize this resource widget. The default
            value is false. If the emphasis value is true and this object has alternatives,
            a list will appear without a label
      required:
      - label
      - displayType
      example:
        label: Dishwasher mode
        displayType: list
        list:
          value: dishwasherMode.value
          alternatives:
          - key: auto
            value: Auto mode
          - key: quick
            value: Quick mode
          - key: rinse
            value: Rinse mode
          - key: dry
            value: Dry mode
  automationAction:
    allOf:
    - $ref: '#/definitions/capabilityKey'
    - type: object
      properties:
        label:
          type: string
        displayType:
          type: string
          description: Specify the type of UI component to use to display this action
            or state. The corresponding field must also be included. For example,
            if you specify "switch" here, you must also include the "switch" key and
            its object definition for this action or state.
          enum:
          - slider
          - list
          - textField
          - numberField
          - multiArgCommand
        slider:
          $ref: '#/definitions/sliderForAutomationAction'
        list:
          $ref: '#/definitions/listForAutomationAction'
        textField:
          $ref: '#/definitions/textFieldForAutomationAction'
        numberField:
          $ref: '#/definitions/numberFieldForAutomationAction'
        multiArgCommand:
          $ref: '#/definitions/multiArgCommand'
        emphasis:
          type: boolean
          description: The effect used to emphasize this resource widget. The default
            value is false. If the emphasis value is true and this object has alternatives,
            a list will appear without a label
      required:
      - label
      - displayType
      example:
        label: Dishwasher mode
        displayType: list
        list:
          command: setDishwasherMode
          alternatives:
          - key: auto
            value: Auto mode
          - key: quick
            value: Quick mode
          - key: rinse
            value: Rinse mode
          - key: dry
            value: Dry mode
  automation:
    type: object
    description: |
      In the SmartThings app, you can build custom Automations to automatically trigger actions when certain condition regarding device's state is met.
    properties:
      conditions:
        type: array
        description: To specify the conditions of device state to trigger actions
          in the automation view of SmartThings app.
        items:
          $ref: '#/definitions/automationListItem'
      actions:
        type: array
        description: To specify the actions of device control based on the device
          state in the automation view of SmartThings app.
        items:
          $ref: '#/definitions/actionListItem'
  group:
    type: string
    description: The group name to which this belongs. Some complex devices can be
      shown grouped in the dashboard card. This is used for grouping states and actions
      in the dashboard.
    example: main
  listForDetailView:
    type: object
    description: To specify available values shown in a drop-down UI. User can select
      one of the value among the list items
    properties:
      command:
        type: object
        properties:
          name:
            type: string
            description: name refers to command name and key of the alternatives is
              the argument of the command
          alternatives:
            $ref: '#/definitions/alternatives'
          supportedValues:
            $ref: '#/definitions/supportedValues'
        required:
        - alternatives
      state:
        type: object
        properties:
          value:
            allOf:
            - $ref: '#/definitions/value'
            - description: Notation which indicates the value of the playStop
            - example: playbackStatus.value
          alternatives:
            allOf:
            - $ref: '#/definitions/alternatives'
            - description: A list of strings corresponding to each possible value
                of the label or unit.
        required:
        - value
        - alternatives
    example:
      command:
        name: setCleaningMode
        alternatives:
        - key: spot
          value: Spot cleaning mode
        - key: auto
          value: Auto cleaning mode
      state:
        value: cleaningMode.value
        alternatives:
        - key: spot
          value: Spot cleaning mode
        - key: auto
          value: Auto cleaning mode
  feature:
    type: array
    description: Including a basicPlus item with the “feature” display type adds a
      shortcut item to the desired detail view.
    items:
      type: object
      properties:
        key:
          type: string
          description: The name of the feature to be added to the detail view. For
            example, if the feature is specified as "cooking", then a detail view
            item will be added called "cooking"
        value:
          type: string
          description: The alternative string of given 'key' value.
      required:
      - key
      - value
    example:
    - key: cooking
      value: Cooking mode
    - key: cleaning
      value: Cleaning mode
  listBase:
    type: object
    properties:
      alternatives:
        $ref: '#/definitions/alternatives'
      supportedValues:
        $ref: '#/definitions/supportedValues'
    required:
    - alternatives
    example:
      alternatives:
      - key: cooling
        value: Cooling mode
      - key: heating
        value: Heating mode
      supportedValues: supportedThermostatModes.value
  listForAutomationAction:
    allOf:
    - $ref: '#/definitions/listBase'
    - type: object
      properties:
        command:
          type: string
          description: The name of the command that is called when an item is chosen
            from the list
      example:
        command: setThermostatMode
  listForAutomationCondition:
    allOf:
    - $ref: '#/definitions/listBase'
    - type: object
      properties:
        value:
          allOf:
          - $ref: '#/definitions/value'
          - description: Notation which indicates the value of the list
      example:
        value: thermostatMode.value
  numberField:
    type: object
    description: This display type creates numberfield that the user enters a new
      value and that the new value is passed as an argument to the command
    properties:
      value:
        allOf:
        - $ref: '#/definitions/value'
        - description: Notation which indicates the value of the numberField
      unit:
        allOf:
        - $ref: '#/definitions/unit'
        - description: Notation which indicates the unit the numberField
      command:
        type: string
      range:
        $ref: '#/definitions/range'
    required:
    - command
    example:
      value: volume.value
      unit: volume.unit
      command: setVolume
      range:
      - 0
      - 100
  numberFieldForAutomationAction:
    type: object
    properties:
      command:
        type: string
      unit:
        allOf:
        - $ref: '#/definitions/unit'
        - description: Notation which indicates the unit of the numberField
      range:
        $ref: '#/definitions/range'
    required:
    - command
    example:
      command: setVolume
      unit: volume.unit
      range:
      - 0
      - 100
  numberFieldForAutomationCondition:
    type: object
    properties:
      value:
        allOf:
        - $ref: '#/definitions/value'
        - description: Notation which indicates the value of the numberField
      unit:
        allOf:
        - $ref: '#/definitions/unit'
        - description: Notation which indicates the unit of the numberField
      range:
        $ref: '#/definitions/range'
    required:
    - value
    example:
      value: volume.value
      unit: volume.unit
      range:
      - 0
      - 100
  playPause:
    type: object
    description: To specify separate commands for play and pause, use the "play" and
      "pause" fields respectively. To specify a single command, use "name" for the
      command and the "play" and "pause" fields for the arguments.
    allOf:
    - $ref: '#/definitions/playPauseCommand'
    - type: object
      properties:
        state:
          type: object
          properties:
            value:
              allOf:
              - $ref: '#/definitions/value'
              - description: Notation which indicates the value of the plauPause
              - example: playbackStatus.value
            play:
              type: string
              description: The value of "attribute" which indicates playing state.
                When the attribute value equals to this then UI will show playing
                state.
            pause:
              type: string
              description: The value of "attribute" which indicates paused state.
                When the attribute value equals to this then UI will show paused state.
            alternatives:
              $ref: '#/definitions/alternatives'
          required:
          - value
          - play
          - pause
    required:
    - command
    - state
    example:
      command:
        name: setPlaybackState
        play: play
        pause: pause
      state:
        value: playbackState.value
        play: playing
        pause: paused
        alternatives:
        - key: playing
          value: Playing
          type: active
        - key: paused
          value: Paused
          type: inactive
  pushButton:
    type: object
    properties:
      command:
        type: string
      argument:
        type: string
    required:
    - command
    example:
      command: setButton
      argument: push
  playStop:
    type: object
    description: To specify separate commands for play and stop, use the "play" and
      "stop" fields respectively. To specify a single command, use “name” for the
      command and the " play" and "stop" fields for the arguments.
    allOf:
    - $ref: '#/definitions/playStopCommand'
    - type: object
      properties:
        state:
          type: object
          properties:
            value:
              allOf:
              - $ref: '#/definitions/value'
              - description: Notation which indicates the value of the playStop
              - example: playbackStatus.value
            play:
              type: string
              description: The value of "attribute" which indicates playing state.
                When the attribute value equals to this then UI will show playing
                state.
            stop:
              type: string
              description: The value of "attribute" which indicates stopped state.
                When the attribute value equals to this then UI will show stopped
                state.
            alternatives:
              $ref: '#/definitions/alternatives'
          required:
          - value
          - play
          - stop
      required:
      - state
      - command
      example:
        state:
          value: playbackState.value
          play: playing
          stop: stopped
          alternatives:
          - key: playing
            value: Playing
            type: active
          - key: stopped
            value: Stopped
            type: inactive
  slider:
    allOf:
    - $ref: '#/definitions/sliderBase'
    - description: To display slider display type, at least one of the command and
        value must be specified.
    - type: object
      properties:
        command:
          type: string
          description: The command which will send the value of the slider as an argument
          example: setVolume
        value:
          allOf:
          - $ref: '#/definitions/value'
          - description: Notation which indicates the value of the slider
          - example: temperature.value
      example:
        command: setVolume
        value: volume.value
  sliderBase:
    type: object
    properties:
      range:
        $ref: '#/definitions/range'
      step:
        allOf:
        - $ref: '#/definitions/step'
        - description: The amount the slider increases and decreases with each action
      unit:
        allOf:
        - $ref: '#/definitions/unit'
        - description: Notation which indicates the unit of the slider
    required:
    - range
    example:
      range:
      - 0
      - 100
      step: 0.5
      unit: volume.unit
  sliderForAutomationAction:
    allOf:
    - $ref: '#/definitions/sliderBase'
    - type: object
      properties:
        command:
          type: string
      required:
      - command
      example:
        command: setTemperature
  sliderForAutomationCondition:
    allOf:
    - $ref: '#/definitions/sliderBase'
    - type: object
      properties:
        value:
          allOf:
          - $ref: '#/definitions/value'
          - description: Notation which indicates the value of the slider
      required:
      - value
      example:
        value: volume.value
  standbyPowerSwitch:
    allOf:
    - $ref: '#/definitions/switch'
    - type: object
    - description: A button switch in the UI. Similar to the `toggleSwitch` displayType
        except for the `off` state is replaced by `standby`.
  stepper:
    type: object
    description: This display type creates a stepper which can trigger “increase”
      and “decrease” commands. The user must specify either a "command" field alone
      or "increase" / "decrease" fields for commands without an argument.
    properties:
      command:
        type: object
        properties:
          name:
            type: string
            description: To specify a single command like "setValue(number)", use
              “command” field for the command name. If this field is specified then
              "increase" and "descrease" fields should not be specified. App will
              calculate desired value when user clicks "+" and "-" button in the UI
              based on the current value of "attribute" with specified "step".
          increase:
            type: string
            description: To specify a command for "increase" without an argument.
          decrease:
            type: string
            description: To specify a command for "decrease" without an argument.
      value:
        allOf:
        - $ref: '#/definitions/value'
        - description: Notation which indicates the value of an attribute that is
            the reference value for next action
      step:
        allOf:
        - $ref: '#/definitions/step'
        - description: The amount the stepper increases and decreases with each action
      range:
        $ref: '#/definitions/range'
    required:
    - command
    - step
    - range
    example:
      command:
        name: setVolume
      value: volume.value
      step: 1
      range:
      - 0
      - 100
  switch:
    type: object
    allOf:
    - description: This switch will display as a slider style on/off switch in the
        UI
    - $ref: '#/definitions/switchCommand'
    - $ref: '#/definitions/switchState'
    - example:
        command:
          name: setLock
          'on': locked
          'off': unlocked
        state:
          value: lock.value
          'on': locked
          'off': unlocked
  textField:
    type: object
    description: This display type creates textfield that the user enters a new value
      and that the new value is passed as an argument to the command
    properties:
      command:
        type: string
      value:
        allOf:
        - $ref: '#/definitions/value'
        - description: Notation which indicates the value of the textField
      range:
        $ref: '#/definitions/range'
    required:
    - command
    example:
      command: sendNotification
      value: notification.value
  textFieldForAutomationAction:
    type: object
    properties:
      command:
        type: string
      range:
        $ref: '#/definitions/range'
    required:
    - command
    example:
      command: sendNotification
      range:
      - 0
      - 20
  textFieldForAutomationCondition:
    type: object
    properties:
      value:
        allOf:
        - $ref: '#/definitions/value'
        - description: Notation which indicates the value of the textField
      range:
        $ref: '#/definitions/range'
    required:
    - value
    example:
      value: notification.value
  toggleSwitch:
    allOf:
    - description: A button style switch element for the UI.
    - $ref: '#/definitions/switch'
    - type: object
  multiArgCommand:
    type: object
    description: To specify multiple arguments command and displayType of each argument.
    properties:
      command:
        type: string
        description: Command name to trigger
        example: playTrack
      arguments:
        type: array
        items:
          type: object
          properties:
            displayType:
              type: string
              description: Specify the type of UI component to use to display this
                action or state. The corresponding field must also be included. For
                example, if you specify "switch" here, you must also include the "switch"
                key and its object definition for this action or state.
              enum:
              - switch
              - slider
              - list
              - textField
              - numberField
            switch:
              $ref: '#/definitions/switchForArgument'
            slider:
              $ref: '#/definitions/sliderForArgument'
            list:
              $ref: '#/definitions/listForArgument'
            textField:
              $ref: '#/definitions/textFieldForArgument'
            numberField:
              $ref: '#/definitions/numberFieldForArgument'
          required:
          - displayType
        minProperties: 2
        maxProperties: 2
    required:
    - command
    - arguments
  switchForArgument:
    type: object
    properties:
      name:
        $ref: '#/definitions/argumentName'
        example: switch
      'on':
        type: string
        description: Value for 'on'
        example: 'on'
      'off':
        type: string
        description: Value for 'off'
        example: 'off'
    required:
    - name
    - 'on'
    - 'off'
  sliderForArgument:
    allOf:
    - $ref: '#/definitions/sliderBase'
    - type: object
      properties:
        name:
          $ref: '#/definitions/argumentName'
    - required:
      - name
  listForArgument:
    allOf:
    - $ref: '#/definitions/listBase'
    - type: object
      properties:
        name:
          $ref: '#/definitions/argumentName'
    - required:
      - name
  textFieldForArgument:
    type: object
    properties:
      name:
        $ref: '#/definitions/argumentName'
      range:
        $ref: '#/definitions/range'
    required:
    - name
    example:
      name: uri
      range:
      - 5
      - 50
  numberFieldForArgument:
    type: object
    properties:
      name:
        $ref: '#/definitions/argumentName'
      range:
        $ref: '#/definitions/range'
    required:
    - name
    example:
      name: level
      range:
      - 0
      - 10
  argumentName:
    type: string
    description: Argument name of a command
  LocaleTag:
    type: string
    description: The tag of the locale as defined in [RFC bcp47](http://www.rfc-editor.org/rfc/bcp/bcp47.txt).
    example: en
  statesArrayItem:
    allOf:
    - $ref: '#/definitions/stateItem'
    - $ref: '#/definitions/capabilityKey'
    - type: object
      required:
      - component
      properties:
        component:
          $ref: '#/definitions/component'
        visibleCondition:
          $ref: '#/definitions/visibleCondition'
      example:
        component: main
        visibleCondition:
          component: main
          capability: switch
          version: 1
          value: switch.value
          operator: EQUALS
          operand: true
  basicPlusArrayItem:
    allOf:
    - $ref: '#/definitions/basicPlusItem'
    - $ref: '#/definitions/capabilityKey'
    - type: object
      properties:
        component:
          $ref: '#/definitions/component'
      example:
        component: main
  actionsArrayItem:
    allOf:
    - $ref: '#/definitions/actionItem'
    - $ref: '#/definitions/capabilityKey'
    - type: object
      properties:
        component:
          $ref: '#/definitions/component'
        visibleCondition:
          $ref: '#/definitions/visibleCondition'
      example:
        component: main
        visibleCondition:
          component: main
          capability: switch
          version: 1
          value: switch.value
          operator: EQUALS
          operand: true
  detailViewListItem:
    allOf:
    - $ref: '#/definitions/detailViewItem'
    - type: object
      properties:
        component:
          $ref: '#/definitions/component'
        visibleCondition:
          $ref: '#/definitions/visibleCondition'
      example:
        component: main
        capability: thermostatCoolingSetpoint
        version: 1
        label: Cooling temperature
        displayType: slider
        slider:
          range:
          - 0.0
          - 40.0
          value: coolingSetpoint.value
          unit: coolingSetpoint.unit
          command: setCoolingSetpoint
        visibleCondition:
          component: main
          capability: switch
          version: 1
          value: switch.value
          operator: EQUALS
          operand: true
  automationListItem:
    allOf:
    - $ref: '#/definitions/automationCondition'
    - type: object
      properties:
        component:
          $ref: '#/definitions/component'
        visibleCondition:
          $ref: '#/definitions/visibleCondition'
      example:
        component: main
        visibleCondition:
          component: main
          capability: switch
          version: 1
          value: switch.value
          operator: EQUALS
          operand: true
  actionListItem:
    allOf:
    - $ref: '#/definitions/automationAction'
    - type: object
      properties:
        component:
          $ref: '#/definitions/component'
        visibleCondition:
          $ref: '#/definitions/visibleCondition'
      example:
        component: main
        visibleCondition:
          component: main
          capability: switch
          version: 1
          value: switch.value
          operator: EQUALS
          operand: true
  toggleSwitchForDashboard:
    allOf:
    - description: A button style switch element for the UI.
    - $ref: '#/definitions/switchForDashboard'
    - type: object
    - example:
        command:
          name: setLock
          'on': locked
          'off': unlocked
        state:
          value: lock.value
          'on': locked
          'off': unlocked
  switchCommand:
    type: object
    properties:
      command:
        type: object
        description: To specify separate commands with no arguments for on and off,
          use the “on” and “off” fields respectively. To specify a single command,
          use “name” for the command and the “on” and “off” fields for the arguments.
        properties:
          name:
            type: string
          'on':
            type: string
          'off':
            type: string
        required:
        - 'on'
        - 'off'
    required:
    - command
    example:
      command:
        name: setLock
        'on': locked
        'off': unlocked
  switchState:
    type: object
    properties:
      state:
        type: object
        description: To describe "on" and "off" state of a switch
        properties:
          value:
            allOf:
            - $ref: '#/definitions/value'
            - description: Notation which indicates the value of the switch
          'on':
            type: string
            description: The attribute value that corresponds to the `on` state.
          'off':
            type: string
            description: The attribute value that corresponds to the `off` state.
          label:
            $ref: '#/definitions/formattedLabel'
          alternatives:
            $ref: '#/definitions/alternatives'
        required:
        - value
        - 'on'
        - 'off'
    example:
      state:
        value: lock.value
        'on': locked
        'off': unlocked
        label: 'Lock: {{lock.value}}'
        alternatives:
        - key: locked
          value: Locked
          type: inactive
        - key: unlocked
          value: Unlocked
          type: active
  switchStateForDashboard:
    type: object
    properties:
      state:
        type: object
        description: To describe "on" and "off" state of a switch
        properties:
          value:
            allOf:
            - $ref: '#/definitions/value'
            - description: Notation which indicates the value of the switch
          'on':
            type: string
          'off':
            type: string
        required:
        - 'on'
        - 'off'
    example:
      state:
        value: lock.value
        'on': locked
        'off': unlocked
  switchForDashboard:
    type: object
    allOf:
    - description: This switch will display as a slider style on/off switch in the
        UI
    - $ref: '#/definitions/switchCommand'
    - $ref: '#/definitions/switchStateForDashboard'
    - example:
        command:
          name: setLock
          'on': locked
          'off': unlocked
        state:
          value: lock.value
          'on': locked
          'off': unlocked
  standbyPowerSwitchForDashboard:
    allOf:
    - $ref: '#/definitions/switchForDashboard'
    - type: object
    - description: A button switch in the UI. Similar to the `toggleSwitch` displayType
        except for the `off` state is replaced by `standby`.
  playPauseCommand:
    type: object
    description: Display type for a play/pause button.
    properties:
      command:
        type: object
        description: To specify separate commands with no arguments for on and off,
          use the “play” and “pause” fields respectively. To specify a single command,
          use “name” for the command and the “play” and “pause” fields for the arguments.
        properties:
          name:
            type: string
          play:
            type: string
          pause:
            type: string
        required:
        - play
        - pause
    required:
    - command
    example:
      command:
        name: setPlaybackState
        play: playing
        pause: paused
  playStopCommand:
    type: object
    description: Display type for a play/stop button.
    properties:
      command:
        type: object
        description: To specify separate commands with no arguments for on and off,
          use the “play” and “stop” fields respectively. To specify a single command,
          use “name” for the command and the “play” and “stop” fields for the arguments.
        properties:
          name:
            type: string
          play:
            type: string
          stop:
            type: string
        required:
        - play
        - stop
    required:
    - command
    example:
      command:
        name: setPlaybackState
        play: play
        stop: pause
  value:
    type: string
    description: Notation which indicates the value of an attribute
    pattern: (^[[a-z]*([A-Z][a-z]*)*){1,36}(\.value)+
    example: switch.value
  unit:
    type: string
    pattern: (^[[a-z]*([A-Z][a-z]*)*){1,36}(\.unit)+
    example: temperature.unit
host: api.smartthings.com
